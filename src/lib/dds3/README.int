$DDSROOT/src/lib/dds3/README.int
  The "README.int" files in this directory tree contain notes
  regarding DDS internals.

14 Feb 2005 Randy Selzler

This directory contains the majority of the source code for the DDS library.

DDS is written almost exclusively in ANSI Standard C.
Both a C and Fortran API is provided.

File name conventions:
  C source code:
    c_*.c     cdds_*: C API.
    cx_*.c    cddx_*: C API convenience routines.
    *.c       ddsXXX: Other routines called internally.
    cdds.h    C API include file.
    f_*.c     fdds_*: Fortran API (wrapper for C version).
    fx_*.c    fddx_*: Fortran API convenience routines (wrapper for C).
    fdds.h    Fortran API include file (arcitecture specific filename).
                Derived from f_$(TARCH).h and f_com.h
    f_com.h   Fortran include, common to all dialects.

  Other source code:
    *.map.dds   Dictionaries for standard header mapping.
    *.fmt.dds   Dictionaries for standard format descriptions.
    parser.y    Bison source
    scanner.l   Flex source
    device.dds  Mag tape device configurations
    Make*
    *.mk

  Derived source code:
    dict*map.c    Derived by makedict from *.map.dds (header mapping).
    dict*fmt.c    Derived by makedict from *.fmt.dds (format descriptions).
    parser.tab.c  Derived by Bison from parser.y
    parser.tab.h  Derived by Bison from parser.y
    scanner.yy.c  Derived by Flex from scanner.l

Overview of include files:
  API for user callable routines
    cdds.h           C API
    f_*.h            Fortran '77 API
    f90_*.h          Fortran '90 API

  API boiler plate
    dds_api.h        Entry and exit sequences for user callable routines.
                   
  Include for internal use
    dds_sys.h        This one include will grab several others.

  Configuration
    dds_config.h     Configuration parameters and special values.
    dds_version.h    Version information

  Global state
    dds_state.h      Global error flags and structure anchors.

  Binary Data
    dds_binary.h     I/O.
    dds_con3.h       conversion macros
    dds_con4.h
    dds_con5.h
    dds_dump.h       Dump in printable form
    dds_hdr.h        Trace header put/get

  Dictionaries
    dds_dict.h       Dictionaries.

  Magnetic Tape support
    dds_magtape.h
    dds_mtio.h

  Storage media
    dds_media.h      For both binary data and dictionaries

  Messages (Panic, Abort, Error, Warn, Verbose, Operator)
    dds_message.h

  Constants for standard formats
    segy_hdr.h       Parameters only needed for SEGY format.
    sep_hdr.h        Parameters only needed for SEP  format.
    usp_hdr.h        Parameters only needed for USP  format.

  Format Descriptions and Header mapping (spooky Flex and Bison stuff)
    dds_opcode.h
    dds_oplist.h
    dds_ptype.h
    dds_symbol.h
    parser.tab.h

  Utilities
    dds_stack.h      General purpose stack (push, pop)
    dds_string.h     String manipulation
    dds_swap.h       Byte swap support
    dds_table.h      Hash tables
    dds_util.h       Miscellaneous stuff

  Dead wood???
    localsys.h

Overview of functions
  Makefile2 categorizes library members into related functions.
  Functions in each category are defined by Make macros, i.e.
    lib_close.c= f_close.c c_close.c closebin.c closeflush.c

    init          System initialization.
    dict          Dictionary manipulation
    scan          Definition scanning
    print         Definition printing
    open          Open binary data
    media         Media manipulation
    mt            Magnetic tape operations
    sym           Flex/Bison compilagtion (symbols)
    close         Close binary data
    io            ???
    map           Header mapping
    read          Read binary data
    write         Write binary data
    seek          Random access seek
    field         Trace header format manipulation
    get           Get trace header value
    put           Put trace header value
    convenience   Alternative API
    util          Malloc/free and miscellaneous
    stack         Stack manipulation
    table         Hash table manipulation
    str           String manipulation
    msg           Messages and error/warning tracking
    dump          Print binary data
    ftn           ???

Programming Style
  
  Each C source code file usually contains only one function.

  Literal constants, other than "1" and "0", are avoided in favor
  of symbol names.  This makes the code more self documenting and
  more suitable for string searches.

  Preprocessor #define for simple constants are avoided in favor
  of enumerated type constants.  This allows debuggers to provide
  more information, i.e. display the actual value for a name.

  Symbolic names that appear in the global name space have a unique
  prefix.  This helps to identify the package associated with a name
  and helps avoid name collisions with other packages.

    API function names are lower case with unique prefix.
      cdds_...     C API
                     Example: cdds_open, cdds_dict, ...
      cddx_...     C API convenience functions (alternative API)
                     Example: cddx_getdict, cddx_read, ...
      fdds_...     Fortran API
                     Example: fdds_open, fdds_dict, ...
      fddx_...     Fortran API convenience functions (alternative API)
                     Example: fddx_getdict, fddx_read, ...

    Function names used internally are mixed case and prefixed by "dds".
    Name components are lower case, except for the first letter.

      dds...       Internal functions
                     Example: ddsOpenMap, ddsStackPushPtr, ...

    Typedefs and constants are prefixed by "DDS_" and are all upper case.
    Name components are separated by "_".
      Example: DDS_USP_FLAGS, DDS_BIN

