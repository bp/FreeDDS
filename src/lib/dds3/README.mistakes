########################################################################
#                 copyright 2003, Amoco Production Company             #
#                             All Rights Reserved                      #
#                     an affiliate of BP America Inc.                  #
########################################################################

 File: README.mistakes

Notes regarding dds, gio, and host.
Hind sight is a wonderful thing...
Now if I can only learn from it ?

==========================================================

Sun 4 OS does not support 8 byte integers.
"host" emulates support using a pair of 4 byte integers
and macros for primitives (+, -, *, /, < 0, == 0, > 0, casts).
This is a major pain and makes code hard to read and maintain.
Originally I considered not supporting > 2 gb.
For better or worse I decided > 2 gb support would be 
a good selling point for DDS and therefore I emulated them
though out "host", "gio" and "dds".

Hindsite: Sun 4 OS never allowed access to regular files > 2 gb,
although pipe and tape access was allowed.
Its unclear if this was an important selling point for DDS or not.

Hindsite: emulating using a pair of 4 byte integers was
technically correct, but double precision float would have
provided 51 bit integer support (good enough).
Using double would have implementation advantages.
Macros would only be needed for division (to truncate fractions)
and scan/print format specifiers could have been macro-ized
instead of kludged.

===========================================================

More OO design was needed in the binary data model.

===========================================================

The dictionary scan/print API uses "C" style format specifiers
and variable length argument lists.   This is very flexible
and is a widely accepted standard, although its foreign to
fortran programmers.

Hindsite: variable length arguments lists are almost impossible
to implement in the fortran API.   It took a heroic effort
to make this work in a portable fashion.   Even the "C" API
toke lots of work.   Java does not support variable length
arguments lists, so its API must change.   All in all it would
have been smarter to provide seperate functions for each primitive
type, and access only one value at a time.
This scheme can be added to DDS and the old scheme could be depricated.

===========================================================

The dictionary scan/print API uses a state variable to remember
which dictionary should be accessed.   This is has caused grief.
It would have been smarter to require another parameter on all
calls to explicitly identify the dictionary.
It could default to the previous dictionary, if the argument
was null, and provide the convenience of the current scheme.
The additional overhead for this is small in the overall scheme
of things, which was one of my earlier concerns.

===========================================================

lex and yacc was a big learning curve.
Now I would avoid them and impliment the functionality directly,
at least for the needs of DDS, although I could not have done
this without the experience gained from lex and yacc.

Hindsite: powerful tools, like lex and yacc, have substantial
learning curves.   I expected this when I started, and it was
confirmed and amplified by experience.

===========================================================

Amoco pays BIG time for its poor leadership at high levels.
Amoco should choose one of the following:
1) mandate one processing system across the company,
   for all in house processing and application development.
   The draconian/dinosaur IT/IS/IBM/MS management model.
2) above the board support for a quality proprietary system.
   The enlightened/primiere management model.
   this is my recommendation.
3) get the hell out of all in-house processing and application
   development.
   The acknowledge-our-incompetence management model.

===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
