"usp.fmt:= $Id: usp.fmt.dds 145 2010-03-17 19:27:25Z user $\n"
"RCS-t=DDS, usp.fmt.dds\n"
"\n"
"fmt:*:usp= /* \"usp\" format description */\n"
"   typedef USP_LINE  PREAMBLE;\n"
"   typedef USP_TRACE SEQUENCE;\n"
"   /* EPILOGUE not applicable */\n"
"\n"
"alias:fmt:usp= fmt:*:usp\n"
"\n"
"fmt:*:usp.USP_FLAGS=\n"
"   typedef enum {\n"
"      USP_UnitFl_FEET \\= 0,\n"
"      USP_UnitFl_METERS \\= 1,\n"
"      USP_MutFlg_YES \\= 0,\n"
"      USP_MutFlg_NO \\= 1,\n"
"      USP_Format_short \\= 1,\n"
"      USP_Format_float \\= 3,\n"
"      USP_StaCor_DEAD \\= 30000\n"
"   } USP_FLAGS;\n"
"\n"
"fmt:*:usp.USP_UnitFl=\n"
"   typedef enum2 {\n"
"      USP_UnitFl_FEET \\= 0,\n"
"      USP_UnitFl_METERS \\= 1\n"
"   } USP_UnitFl;\n"
"\n"
"fmt:*:usp.USP_MutFlg=\n"
"   typedef enum2 {\n"
"      USP_MutFlg_YES \\= 0,\n"
"      USP_MutFlg_NO \\= 1\n"
"   } USP_MutFlg;\n"
"\n"
"fmt:*:usp.USP_Format=\n"
"   typedef enum2 {\n"
"      USP_Format_short \\= 1,\n"
"      USP_Format_float \\= 3\n"
"   } USP_Format;\n"
"\n"
"fmt:*:usp.USP_StaCor=\n"
"   typedef enum2 {\n"
"      USP_StaCor_DEAD \\= 30000\n"
"   } USP_StaCor;\n"
"\n"
"fmt:*:usp.USP_LINE=\n"
"   typedef align(1) struct {\n"
"      GREEN_PREFIX line_green_prefix;\n"
"      USP_CHAR\n"
"         EqpCod,     /*   0: Equipment code */\n"
"         CrwNam[6],  /*   1: Crew Six Characters */\n"
"         DatTyp,     /*   7: Data Type */\n"
"         DgTrkS[2],  /*   8: Digital Truck System */\n"
"         PrcNam[10], /*  10: Processor Name */\n"
"         PrcNam_GAP[4],\n"
"         PrcDat[8],  /*  24: Processing Date */\n"
"         OACLin[8],  /*  32: OAC Line, 7 char right just */\n"
"         JobNum[8];  /*  40: JOB Number 7 char right just */\n"
"      USP_INT\n"
"         NumTrc,     /*  48: number traces per record */\n"
"         NumRec,     /*  52: number records per line */\n"
"         SmpInt,     /*  56: sample interval (* UnitSc) */\n"
"         NumSmp;     /*  60: number samples per trace */\n"
"      USP_SHORT\n"
"         Format,     /*  64: format code */\n"
"         IndAdj,     /*  66: index adjustment */\n"
"         OpGrFl;     /*  68: Opposite/Between Group Flag */\n"
"      USP_CHAR\n"
"         OpGrFl_GAP[2],\n"
"         SrtTyp[2];  /*  72: Sort Type (0 FIFO, 1 LgArrow, 2 max/min) */\n"
"      USP_SHORT \n"
"         CDPFld;     /*  74: CDP Fold */\n"
"      USP_CHAR\n"
"         GrpInt[4];  /*  76: Group Interval */\n"
"      union {USP_INT\n"
"         DtInFl,     /*  80: Data Indicator Flag */\n"
"         Dy1000;     /*  80: Record interval*1000 (MBS) */\n"
"      } _DtInFl;\n"
"      USP_SHORT\n"
"         MxSPEl,     /*  84: Max Source Point Elevation */\n"
"         MnSPEl,     /*  86: Min Source Point Elevation */\n"
"         MxRSEL,     /*  88: Max Ref Surface Elevation */\n"
"         MnRSEL,     /*  90: Min Ref Surface Elevation */\n"
"         MxGrEl,     /*  92: Maximum group Elevation */\n"
"         MnGrEl,     /*  94: Minimum group Elevation */\n"
"         MxTrSt,     /*  96: Maximum trace Static */\n"
"         MnTrSt;     /*  98: Minimum trace Static */\n"
"      USP_CHAR\n"
"         LinDir[4];  /* 100: Line Direction e.g., N45E */\n"
"      USP_INT \n"
"         AERcPr;     /* 104: Accumulative Est Rec Proc */\n"
"      USP_SHORT\n"
"         OrNTRC,     /* 108: Original traces Per Record */\n"
"         OrNREC;     /* 110: Original Number records */\n"
"      USP_FLOAT \n"
"         MutVel;     /* 112: Muting Velocity */\n"
"      USP_SHORT\n"
"         ZDMuTm,     /* 116: Zero Distance Mutine Time */\n"
"         IntInc;     /* 118: interpolation increment */\n"
"      union {USP_INT\n"
"         WatVel,     /* 120: Water Velocity */\n"
"         RefVel;     /* 120: SLNT Reference Velocity (MBS) */\n"
"      } _WatVel;\n"
"      USP_SHORT\n"
"         MxShDp,     /* 124: Maximum Shot Depth */\n"
"         MnShDp,     /* 126: Minimum Shot Depth */\n"
"         MxUHTm,     /* 128: Maximum Uphole Time */\n"
"         MnUHTm,     /* 130: Minimum Uphole Time */\n"
"         MxTrOf,     /* 132: Maximum traverse Offset */\n"
"         MnTrOf;     /* 134: Minimum traverse Offset */\n"
"      union {USP_SHORT\n"
"         RATTrc,     /* 136: RATS Traces per Record */\n"
"         AnglSt;     /* 136: SLNT Starting Angle (MBS) */\n"
"      } _RATTrc;\n"
"      union {USP_SHORT\n"
"         RATFld,     /* 138: RATS Fold */\n"
"         AngInc;     /* 138: SLNT Angle Increment (MBS) */\n"
"      } _RATFld;\n"
"      USP_SHORT\n"
"         UnitFl,     /* 140: Units Flag (0 feet, 1 meters) */\n"
"         FrstSP,     /* 142: 1st SP Number on Line */\n"
"         DpN1SP,     /* 144: Dep Pt Num Below 1st Src Pt */\n"
"         NmDpIn,     /* 146: Num Dep Pt Int per Unit Inc */\n"
"         StWdFl,     /* 148: Static Wd Flag (0 old, > new) */\n"
"         DptInt;     /* 150: Depth Point interval */\n"
"      union {USP_INT\n"
"         TmMsSl,     /* 152: Time of First Slice (* UnitSc) */\n"
"         Dx1000;     /* 152: Trace interval*1000 (MBS) */\n"
"      } _TmMsSl;\n"
"      union {USP_INT\n"
"         TmSlIn,     /* 156: Time Slice increment in ms */\n"
"         Dz1000;     /* 156: Depth Interval*1000 (MBS) */\n"
"      } _TmSlIn;\n"
"      USP_FLOAT \n"
"         TmMsFS;     /* 160: Time of First Sample (* UnitSc) */\n"
"      USP_INT \n"
"         NTrLnS;     /* 164: Number Traces/Line Sorted In */\n"
"      USP_SHORT\n"
"         PltDir,     /* 168: Plot Direction */\n"
"         LgRfEl,     /* 170: Log Reference Elevation */\n"
"         MnLnIn,     /* 172: Minimum line Index */\n"
"         MxLnIn,     /* 174: Maximum line Index */\n"
"         MnDpIn,     /* 176: Minimum depth Index */\n"
"         MxDpIn;     /* 178: Maximum depth Index */\n"
"      USP_FLOAT\n"
"         ILClIn,     /* 180: In Line Cell Increment */\n"
"         CLClIn;     /* 184: Cross Line Cell Increment */\n"
"      USP_SHORT\n"
"         ReSpFm,     /* 188: Reserved Special Format */\n"
"         VlFnRF;     /* 190: Vel Func Ref Flag (0 RI, 1 DI) */\n"
"      USP_CHAR\n"
"         OACUsr[4],  /* 192: OAC USER Field */\n"
"         LinNam[8];  /* 196: Line Name */\n"
"      USP_SHORT\n"
"         MutFlg;     /* 204: Mute Flag (0 yes, 1 no) */\n"
"      USP_CHAR\n"
"         SPBias[2];  /* 206: Shot point Bias */\n"
"      USP_SHORT \n"
"         SpBiFl;     /* 208: Shot Point Bias Flag */\n"
"      USP_CHAR\n"
"         APIWNo[12], /* 210: API Well Number */\n"
"         APIWNo_GAP[2]; /* 222: */\n"
"      USP_FLOAT \n"
"         NmSpMi;     /* 224: Number Shot points per Mile */\n"
"      USP_CHAR\n"
"         NmSpMi_GAP[368], /* 228: */\n"
"         NmSpMi_GAP2[4];  /* 596: */\n"
"      union {USP_SHORT\n"
"         VelFun[200];  /* 600: velocity function */\n"
"         struct {\n"
"            USP_SHORT\n"
"               MinVel,  /* 600: Minimum velocity (MBS) */\n"
"               MaxVel,  /* 602: Maximum velocity (MBS) */\n"
"               Nx_Pad,  /* 604: No of Padded Traces (in X) */\n"
"               Nx_Win,  /* 606: No of Traces in Window (in X) */\n"
"               Nx_Rec,  /* 608: No of Windowed Records (in X) */\n"
"               NxLine,  /* 610: Number of Lines (in X) */\n"
"               Nx_Trc,  /* 612: Number of Traces (in X) */\n"
"               Ny_Pad,  /* 614: No of Padded Traces (in Y) */\n"
"               Ny_Win,  /* 616: No of Traces in Window (in Y) */\n"
"               Ny_Rec,  /* 618: No of Windowed Records (in Y) */\n"
"               NyLine,  /* 620: Number of Lines (in Y) */\n"
"               Ny_Trc,  /* 622: Number of Traces (in Y) */\n"
"               MCTrSp,  /* 624: Multicomponent trace spacing (MC) */\n"
"               NumCmp,  /* 626: Number of Components (MC) */\n"
"               MCLE01,  /* 628: Component (MC) */\n"
"               MCLE02,  /* 630: Component (MC) */\n"
"               MCLE03,  /* 632: Component (MC) */\n"
"               MCLE04,  /* 634: Component (MC) */\n"
"               MCLE05,  /* 636: Component (MC) */\n"
"               MCLE06,  /* 638: Component (MC) */\n"
"               MCLE07,  /* 640: Component (MC) */\n"
"               MCLE08,  /* 642: Component (MC) */\n"
"               MCLE09,  /* 644: Component (MC) */\n"
"               MCLE10,  /* 646: Component (MC) */\n"
"               MCLE11,  /* 648: Component (MC) */\n"
"               MCLE12,  /* 650: Component (MC) */\n"
"               MCLE13,  /* 652: Component (MC) */\n"
"               MCLE14,  /* 654: Component (MC) */\n"
"               MCLE15,  /* 656: Component (MC) */\n"
"               MCLE16,  /* 658: Component (max 16 in list) (MC) */\n"
"               MC_GAP[10], /* 660: Left a little hole for MC stuff */\n"
"               OrNSMP;  /* 680: Original Number of Samples/Trace */\n"
"            align(2) float4   /* FKFLT fake float kludge */\n"
"               AziIln,  /* 682: In-Line Azimuth */\n"
"               AziXln,  /* 686: Cross-Line Azimuth */\n"
"               HrzNul;  /* 690: Null Horizon Flag Value */\n"
"            USP_SHORT   /* deprecated, retained for padding only */\n"
"               T_Unit;  /* 694: Time Units (0\\=ms, 1\\=micro-sec) */\n"
"            float4   /* FKFLT fake float kludge */\n"
"               UnitSc,  /* 696: Smp Units Multiplier (1.0 is sec) */\n"
"                        /*    Default is 0.001 (msec). */\n"
"                        /*    See SmpInt, TmMsSl and TmMsFS. */\n"
"               SmpFlt,  /* 700: Flt Pt Sample Interval */\n"
"               MaxAmp,  /* 704: Maximum Absolute Amplitude */\n"
"               AvgAmp,  /* 708: Average Absolute Amplitude */\n"
"               RmsAmp;  /* 712: RMS Absolute Amplitude */\n"
"            USP_SHORT   /* deprecated, retained for padding only */\n"
"               VelTyp,  /* 716: Velocity Type (0:RMS, 1:Avg, 2:Int, 3:Inst) */\n"
"               WlfCol,  /* 718: Wavelet Low Frequency cutoff level */\n"
"               WavBas,  /* 720: Wavelet Basis */\n"
"               WavMom,  /* 722: Wavelet Moment */\n"
"               WlfCo1,  /* 724: Wavelet Low Frequency cutoff level 1 */\n"
"               WavBa1,  /* 726: Wavelet Basis 1 */\n"
"               WavMo1,  /* 728: Wavelet Moment 1 */\n"
"               WlfCo2,  /* 730: Wavelet Low Frequency cutoff level 2 */\n"
"               WavBa2,  /* 732: Wavelet Basis 2 */\n"
"               WavMo2;  /* 734: Wavelet Moment 2 */\n"
"            float4   /* FKFLT fake float kludge */\n"
"               FreQst,  /* 736: Frequency Start */\n"
"               FreQnd,  /* 740: Frequency End */\n"
"               RaMmin,  /* 744: Radon Moveout Min */\n"
"               RaMmax,  /* 748: Radon Moveout Min */\n"
"               RaXmax,  /* 752: Radon Max Trace Distance */\n"
"               RaZref;  /* 756: Radon Reference Depth */\n"
"         } _MinVel;\n"
"      } _VelFun;\n"
"      USP_SHORT\n"
"         HlhEnt,     /* Number of Entries in HLH */\n"
"         HlhByt;     /* Number of Bytes in HLH */\n"
"      unsigned1 HlhBuf[USP_HLH_SIZE];  /* HLH buffer (sizes and char) */\n"
"      unsigned1 usp_line_pad[USP_LINE_PAD]; \n"
"   } USP_LINE;\n"
"\n"
"fmt:*:usp.USP_TRACE=\n"
"   typedef align(1) struct {\n"
"      GREEN_PREFIX green_prefix;\n"
"      USP_SHORT\n"
"         SGRNum,     /* SGR number */\n"
"         SGRAmp;     /* SGR PreAmp Gain, Filter */\n"
"      USP_INT SGRDat;  /* SGR Julian Date Recorded */\n"
"      USP_SHORT\n"
"         FlReFN,     /* Field Record File Number */\n"
"         FlStNm,     /* SGR Field Station Number */\n"
"         PREPIn,     /* PREP Initiation Static */\n"
"         InStUn,     /* Initiation Static Unapplied */\n"
"         InStAp,     /* Initiation Static Applied */\n"
"         PREPRc,     /* PREP Reception Static */\n"
"         RcStUn,     /* Reception Static Unapplied */\n"
"         RcStAp,     /* Reception Static Applied */\n"
"         ToStAp,     /* Total Static Applied */\n"
"         ToTmAA,     /* Total Timing Adjust Applied */\n"
"         ToStUn,     /* Total Static Unapplied */\n"
"         ToTmAU,     /* Total Timing Adjust Unapplied */\n"
"         SrComp,     /* Source component xyz code */\n"
"         RcComp,     /* Receiver component xyz code */\n"
"         SrStat,     /* Source floating datum static */\n"
"         RcStat,     /* Receiver floating datum static */\n"
"         TrHdID,     /* Trace Header Identifier */\n"
"         SrRcAz;     /* Source-to-Receiver Azimuth */\n"
"      USP_INT \n"
"         SrPtXC,     /* Src Point X-Coordinate 3D */\n"
"         SrPtYC,     /* Src Point Y-Coordinate 3D */\n"
"         RcPtXC,     /* Rec Point X-Coordinate 3D */\n"
"         RcPtYC,     /* Rec Point Y-Coordinate 3D */\n"
"         SrRcMX,     /* Src Rec Midpoint X 3D */\n"
"         SrRcMY,     /* Src Rec Midpoint Y 3D */\n"
"         CDPBCX,     /* CDP Bin Center X Coordinate */\n"
"         CDPBCY,     /* CDP Bin Center Y Coordinate */\n"
"         InTrCn;     /* Incremental Trace Counter */\n"
"      USP_SHORT\n"
"         FlDtEl,     /* Floating Datum Elev this CDP */\n"
"         MulSkw,     /* Multiplex Skew (ms*1000) */\n"
"         PerSPO,     /* Perpendicular Src Pt Off y */\n"
"         InlSPO,     /* Inline Src Pt Off x */\n"
"         TiLiIx[6],  /* Tie Line Indicator 1-6 */\n"
"         TVPT01,     /* Time of Time-Vel Pair */\n"
"         TVPV01,     /* Velocity of Time-Vel Pair */\n"
"         TVPT02, TVPV02, TVPT03, TVPV03, TVPT04, TVPV04,\n"
"         TVPT05, TVPV05, TVPT06, TVPV06, TVPT07, TVPV07,\n"
"         TVPT08, TVPV08, TVPT09, TVPV09, TVPT10, TVPV10,\n"
"         TVPT11, TVPV11, TVPT12, TVPV12, TVPT13, TVPV13,\n"
"         TVPT14, TVPV14, TVPT15, TVPV15, TVPT16, TVPV16,\n"
"         TVPT17, TVPV17, TVPT18, TVPV18, TVPT19, TVPV19,\n"
"         TVPT20, TVPV20,\n"
"         RedVel,     /* Reduction Velocity for vred */\n"
"         RedTim,     /* Time of first sample for vred */\n"
"         VPick1,     /* Auto Static Pick 1 */\n"
"         VPick2,     /* Auto Static Pick 2 */\n"
"         LRcCDP,     /* Last Record CDP */\n"
"         CabDep,     /* Cable Depth */\n"
"         WDepDP,     /* Water Depth Above Depth Point */\n"
"         DPOPer,     /* Depth Point Offset Perpendicular */\n"
"         ShtDep,     /* shot depth */\n"
"         UphlTm;     /* uphole time in ms */\n"
"      USP_INT \n"
"         DpPtLt,     /* depth pt lat (deg* 10^5) */\n"
"         DpPtLn;     /* depth pt lon (deg* 10^5) */\n"
"      USP_SHORT\n"
"         FoldNm,     /* fold */\n"
"         RecNum,     /* record number */\n"
"         TrcNum,     /* trace number */\n"
"         SrcPnt,     /* src point above this depth pt */\n"
"         SrcLoc,     /* src location ind mult by 10 */\n"
"         PrRcNm,     /* permanent record number PRI */\n"
"         PrTrNm,     /* permanent trace number PTI */\n"
"         SrPtEl;     /* source point elevation */\n"
"      USP_INT \n"
"         SrPrLt,     /* source point lat (deg* 10^5) */\n"
"         SrPrLn;     /* source point lon (deg* 10^5) */\n"
"      USP_SHORT\n"
"         DstUsg,     /* unsigned trace distance */\n"
"         RecInd,     /* rec location index	GI */\n"
"         DstSgn,     /* signed trace distance */\n"
"         GrpElv,     /* group elevation */\n"
"         LinInd,     /* line index 3D */\n"
"         DphInd,     /* depth index */\n"
"         DePtEl,     /* depth point elevation */\n"
"         RfSrEl,     /* reference surface elevation */\n"
"         StaCor,     /* static correction, dead 30000 */\n"
"         DatShf,     /* datum shift */\n"
"         SoPtNm;     /* source point number */\n"
"      ascii1\n"
"         SoPtAl, /* source point alphabetic sufix */\n"
"         SoPtBi; /* source point bias /10000 */\n"
"      SAMPLE_TYPE Samples[axis_size(1)]; /* time series */\n"
"      unsigned1 usp_trace_pad[USP_TRACE_PAD];\n"
"   } USP_TRACE;\n"
"\n"
"comment= deferred ...\n"
"      union {\n"
"         struct {ascii1\n"
"            SoPtAl, /* source point alphabetic sufix */\n"
"            SoPtBi; /* source point bias /10000 */\n"
"         } _SoPtAl;\n"
"         USP_SHORT ESPNum;  /* energy source point number */\n"
"      } _SoPtAl;\n"
"\n"
"comment= default sort field translation\n"
"\n"
"sort:old_fmt.old_sort_field:new_fmt= new_sort_field\n"
"\n"
"sort:segy.FieldRecNum:usp= PrRcNm\n"
"sort:segy.CdpTrcNum:usp= TrcNum\n"
"sort:segy.FieldTrcNum:usp= PrTrNm\n"
"sort:segy.Spare.Hdr.RecNum:usp= RecNum\n"
"sort:segy.Spare.Hdr.SoPtNm:usp= SoPtNm\n"
"sort:segy.Spare.Hdr.RecInd:usp= RecInd\n"
"sort:segy.Spare.Hdr.SrcPnt:usp= SrcPnt\n"
"sort:segy.SrcX:usp= SrPtXC\n"
"sort:segy.SrcY:usp= SrPtYC\n"
"sort:segy.GrpX:usp= RcPtXC\n"
"sort:segy.GrpY:usp= RcPtYC\n"
"sort:segy.CdpNum:usp= DphInd\n"
"sort:segy.SrcX:usp= SrPtXC\n"
"sort:segy.SrcY:usp= SrPtYC\n"
"sort:segy.GrpX:usp= RcPtXC\n"
"sort:segy.GrpY:usp= RcPtYC\n"
"sort:segy.DstSgn:usp= DstSgn\n"
"\n"
"sort:segy1.FieldRecNum:usp= PrRcNm\n"
"sort:segy1.CdpTrcNum:usp= TrcNum\n"
"sort:segy1.FieldTrcNum:usp= PrTrNm\n"
"sort:segy1.Spare1.Hdr.RecNum:usp= RecNum\n"
"sort:segy1.Spare1.Hdr.SoPtNm:usp= SoPtNm\n"
"sort:segy1.Spare1.Hdr.RecInd:usp= RecInd\n"
"sort:segy1.Spare1.Hdr.SrcPnt:usp= SrcPnt\n"
"sort:segy1.SrcX:usp= SrPtXC\n"
"sort:segy1.SrcY:usp= SrPtYC\n"
"sort:segy1.GrpX:usp= RcPtXC\n"
"sort:segy1.GrpY:usp= RcPtYC\n"
"sort:segy1.CdpNum:usp= DphInd\n"
"sort:segy1.SrcX:usp= SrPtXC\n"
"sort:segy1.SrcY:usp= SrPtYC\n"
"sort:segy1.GrpX:usp= RcPtXC\n"
"sort:segy1.GrpY:usp= RcPtYC\n"
"sort:segy1.DstSgn:usp= DstSgn\n"
"\n"
"sort:su.FieldRecNum:usp= PrRcNm\n"
"sort:su.CdpTrcNum:usp= TrcNum\n"
"sort:su.FieldTrcNum:usp= PrTrNm\n"
"sort:su.Spare.Hdr.RecNum:usp= RecNum\n"
"sort:su.Spare.Hdr.SoPtNm:usp= SoPtNm\n"
"sort:su.Spare.Hdr.RecInd:usp= RecInd\n"
"sort:su.Spare.Hdr.SrcPnt:usp= SrcPnt\n"
"sort:su.SrcX:usp= SrPtXC\n"
"sort:su.SrcY:usp= SrPtYC\n"
"sort:su.GrpX:usp= RcPtXC\n"
"sort:su.GrpY:usp= RcPtYC\n"
"sort:su.CdpNum:usp= DphInd\n"
"sort:su.SrcX:usp= SrPtXC\n"
"sort:su.SrcY:usp= SrPtYC\n"
"sort:su.GrpX:usp= RcPtXC\n"
"sort:su.GrpY:usp= RcPtYC\n"
"sort:su.DstSgn:usp= DstSgn\n"
"\n"
"comment= the following are created explicitly by \"open\".\n"
"\n"
"explicit_fmt:*:usp.USP_ADJUST= /* USP format adjustments */\n"
"   typedef enum {\n"
"      USP_LINE_PAD \\= 0,      /* byte size of line header pad */\n"
"      USP_TRACE_PAD \\= 0,     /* byte size of trace pad */\n"
"      USP_HLH_SIZE \\= 0       /* byte size of HlhBuf */\n"
"} USP_ADJUST;\n"
"\n"
"fmt:USP_CHAR=         typedef ascii1 USP_CHAR;\n"
"fmt:USP_SHORT=        typedef integer2 USP_SHORT;\n"
"fmt:USP_INT=          typedef integer4 USP_INT;\n"
"fmt:USP_FLOAT=        typedef float4 USP_FLOAT;\n"
"fmt:SAMPLE_TYPE=      typedef float4 SAMPLE_TYPE;\n"
"";
