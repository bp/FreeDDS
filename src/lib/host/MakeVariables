########################################################################
#                      copyright 2005, BP America                      #
#                          All Rights Reserved                         #
########################################################################
# $Id: MakeVariables 308 2018-12-14 16:55:55Z user $
#
# gmake variables file for dds applications
#
CHOST    :=$(if $(CHOST)$(chost),X)
CFORT    :=$(if $(CFORT)$(cfort),X)
C+HOST   :=$(if $(C+HOST)$(c+host),X)
COMPILER :=$(if $(COMPILER),$(COMPILER),$(compiler))
CHECK    :=$(if $(CHECK)$(check),X)
DEBUG    :=$(if $(DEBUG)$(debug),X)
EXTEND   :=$(if $(EXTEND)$(extend),X)
F90      :=$(if $(F90)$(f90),X)
FFT      :=$(if $(FFT)$(fft),X)
INLINE   :=$(if $(INLINE)$(inline),X)
MOTIF    :=$(if $(MOTIF)$(motif),X)
MP       :=$(if $(MP)$(mp),X)
MPI      :=$(if $(MPI)$(mpi),X)
MPIX     :=$(if $(MPIX)$(mpix),X)
NODDS    :=$(if $(NODDS)$(nodds),X)
NOGOPT   :=$(if $(NOGOPT)$(nogopt),X)
O1       :=$(if $(O1)$(o1),X)
O2       :=$(if $(O2)$(o2),X)
XHOST    :=$(if $(XHOST)$(xhost),X)
UNDEF    :=$(if $(UNDEF)$(undef),X)
WARN     :=$(if $(WARN)$(warn),X)
USP      :=$(if $(USP)$(usp),X)
INT      :=$(if $(INT)$(int),X)
NETLIB   :=$(if $(NETLIB)$(netlib),X)
LNDMRK   :=$(if $(lndmrk),$(lndmrk),$(LNDMRK))
LNDMRK   :=$(patsubst r5k,R5K,${LNDMRK})
LNDMRK   :=$(patsubst r5K,R5K,${LNDMRK})
LNDMRK   :=$(patsubst R5k,R5K,${LNDMRK})
LNDMRK   :=$(if $(LNDMRK),$(LNDMRK))
MATHADV  :=$(if $(MATHADV)$(mathadv),X)
TESTDDS  :=$(if $(TESTDDS)$(testdds),X)
HOSTG    :=$(if $(HOSTG)$(hostg),g)
GIOG     :=$(if $(GIOG)$(giog),g)
DDS3G    :=$(if $(DDS3G)$(dds3g),g)
FFTG     :=$(if $(FFTG)$(fftg),g)
TSTSHELL :=$(if $(tstshell),$(tstshell)$(TSTSHELL),sh)

#
#  shorten the suffix list.  the default list is very long.
#  nota bene: adding a suffix does not automatically add a rule.
#
.SUFFIXES:
.SUFFIXES: .F .f .for .F90 .f90 .c .C .cpp .c++ .o .h .a

#
# check environment
#
DDS_DIST:=$(if ${DDS_DIST},${DDS_DIST},$(shell if [ -d /hpc/tstapps ]; then echo /tstapps; else echo /tstapps/global; fi))
ASI:=$(shell if [ -d ${DDS_DIST}/asi ]; then echo "/asi"; fi)
DDSROOT:=$(if ${DDSROOT},${DDSROOT},$(error DDSROOT not defined))
DIST_PRODUCT:=$(if ${DIST_PRODUCT},${DIST_PRODUCT},mbs)
ifneq "$ASI" ""
CHPC_SSH:=""
CHPC_SCP:=""
HOU_SSH:=""
HOU_SCP:=""
# HOU_SSH:=""
# HOU_SCP:=""
endif
ifeq "${DIST_PRODUCT}" "usp"
USP:=X
endif
ifeq "${USP}" "X"
USP_DIST:=$(if ${USP_DIST},${USP_DIST},${DDS_DIST})
endif
USPROOT:=$(if ${USPROOT},${USPROOT},$(shell if [ -d ${USP_DIST}${ASI}/src/usp ]; then echo ${USP_DIST}${ASI}/src/usp; else echo /hpc/soft/usp; fi))
ROOTBIN:=$(if ${TESTDDS},${DDSROOT}/src/lib/host,${DDSROOT}/bin)
PRODUCTROOT:=$(if ${USP},${USPROOT},${DDSROOT})
DIST_ROOT:=$(if ${USP},${USP_DIST},${DDS_DIST})
DDSRSH:=$(if ${DDSRSH},${DDSRSH},ssh)
DDSBIN:=$(if ${DDSBIN},${DDSBIN},${PWD}/bin)
TESTDATA:=$(if ${DDS_TEST_DATA},${DDS_TEST_DATA},/lustre05/vol0/DDS_TEST_DATA)
TESTDATA:=$(shell if [ ! -d "${TESTDATA}" -a -d "/hpc${TESTDATA}" ]; then \
                     echo "/hpc${TESTDATA}"; else echo "${TESTDATA}"; fi)
TESTDATA:=$(strip ${TESTDATA})

DDSMODULE="module load ddsdevel/ddsdevel-hybrid;"

export DIST_PRODUCT DIST_ROOT ASI PRODUCTROOT LNDMRK COMPILER CHPC_SCP CHPC_SSH HOU_SCP HOU_SSH


#
# Must have "Name" or "LibName" but not both
#
Name   :=$(strip ${Name})
LibName:=$(strip ${LibName})
CHK:=$(if ${Name}${LibName},"${Name}${LibName}", \
          $(error Must have either "Name", "LibName", ! defined))
CHK:=$(if $(shell if [ "${Name}" -a "${LibName}" ]; then echo BOTH; fi), \
          $(error Cannot have both "Name=${Name}" and "LibName=${LibName}" defined))

ifndef UNDEF
   Undef:= -u
endif
ifdef C+HOST
   CHOST:=X
endif
ifdef CFORT 
   CHOST:=X
endif
ifdef CHOST
   ifdef FFT
      CFORT:=x
   endif
endif

ifdef NODDS
   NODDSLIBS:=X
endif

ifdef FFT
   NODDSLIBS:=
endif

ifdef FFTG
   NODDSLIBS:=
endif

ifdef MPI
   BINTYPE:=$(if ${BINTYPE},$(error Cannot use ${BINTYPE} with MPI),MPI)
endif
ifdef MPIX
   BINTYPE:=$(if ${BINTYPE},$(error Cannot use ${BINTYPE} with MPIX),MPIX)
endif
ifdef LNDMRK
   BINTYPE:=$(if ${BINTYPE},$(error Cannot use ${BINTYPE} with LNDMRK),LNDMRK)
endif

# Note: we only want to pass LNDMRK to HostDir as a flag if it is NOT R5K

FFT:= $(if ${NETLIB}${FFT},X)
Args:=$(if ${CHECK},CHECK) \
      $(if ${EXTEND},EXTEND) \
      $(if $(patsubst R5K,,${LNDMRK}),LNDMRK) \
      $(if ${FFT},FFT) \
      $(if ${MP},MP) \
      $(if ${MPI}${MPIX},MPI) \
      $(if ${COMPILER},COMPILER=${COMPILER})

#
#-----------------------------------------------------------------------
#  Setup Host information
#-----------------------------------------------------------------------
#
All:= $(shell ${ROOTBIN}/HostDir -a ${Args})
All:= $(subst ^,^ ,$(shell echo "${All}"|sed -e 's/ /SPACE/g'))
ArchName   :=$(subst ^,,$(subst SPACE, ,$(word  1,${All})))
TArchBinDir:=$(subst ^,,$(subst SPACE, ,$(word  2,${All})))
System     :=$(subst ^,,$(subst SPACE, ,$(word  4,${All})))
Release    :=$(subst ^,,$(subst SPACE, ,$(word  5,${All})))
Machine    :=$(subst ^,,$(subst SPACE, ,$(word  6,${All})))

#
#-----------------------------------------------------------------------
#  Setup the Compiler settings
#-----------------------------------------------------------------------
#
All:= $(shell ${ROOTBIN}/HostComp -a ${Args})
All:= $(subst ^,^ ,$(shell echo "${All}"|sed -e 's/ /SPACE/g'))
Vendor     :=$(subst ^,,$(subst SPACE, ,$(word  1,${All})))
CompLevel  :=$(subst ^,,$(subst SPACE, ,$(word  2,${All})))
CompExt    :=$(subst ^,,$(subst SPACE, ,$(word  3,${All})))
CompVer    :=$(subst ^,,$(subst SPACE, ,$(word  4,${All})))
CC         :=$(subst ^,,$(subst SPACE, ,$(word  5,${All})))
C++C       :=$(subst ^,,$(subst SPACE, ,$(word  6,${All})))
FC         :=$(subst ^,,$(subst SPACE, ,$(word  7,${All})))
F90C       :=$(subst ^,,$(subst SPACE, ,$(word  8,${All})))
TargetFlags:=$(subst ^,,$(subst SPACE, ,$(word  9,${All})))
CCFlags    :=$(subst ^,,$(subst SPACE, ,$(word 10,${All})))
FCFlags    :=$(subst ^,,$(subst SPACE, ,$(word 11,${All})))
CLFlags    :=$(subst ^,,$(subst SPACE, ,$(word 12,${All})))
FLFlags    :=$(subst ^,,$(subst SPACE, ,$(word 13,${All})))
CLibes     :=$(subst ^,,$(subst SPACE, ,$(word 14,${All})))
FLibes     :=$(subst ^,,$(subst SPACE, ,$(word 15,${All})))
CLD        := ${CC}
C++LD      := ${C++C}
FLD        := ${FC}
F90LD      := ${F90C}
#
# setup subversion revision number if available
#
# SVNVERSION:=/hpc/tstapps/RHEL/2.6/x86_64/subversion/1.8.3/bin/svnversion
ifeq "${VERSION}" ""
  ifeq "${Vendor}" "intel"
    SVNVERSION:=/hpc/apps/RHEL/2.6/x86_64/svn/1.8.3/bin/svnversion
  endif
  ifeq "${Vendor}" "ibm"
    SVNVERSION:=/hpc/apps/RHEL/3.10/ppc64le/svn/1.8.3/bin/svnversion
  endif
  SVNVERSION:=$(shell if [ -f ${SVNVERSION} ]; then echo "${SVNVERSION}"; \
                    else echo "echo none"; fi)
else
  SVNVERSION:=$(shell echo "echo ${VERSION}")
endif


FC:=$(if $(FC),$(FC),$(error ${Vendor}))
ifdef F90
   FC:=${F90C}
endif

ifdef FFTG
   CLibes:=$(subst  -lfft , -lfftg ,$(CLibes))
   FLibes:=$(subst  -lfft , -lfftg ,$(FLibes))
endif
FFTW:=$(filter -lfftw%,${FLibes} ${CLibes})

ifdef CFORT
   CLD:= ${FLD}
   ifeq "${Vendor}" "intel"
      CLD:= ${CLD} -nofor_main
   endif
   ifeq "${Vendor}" "pgi"
      CLD:= ${CLD} -Mnomain
   endif
endif

IncludeDirs:= -I.
LibDirs    :=
Libes      := $(if ${Libes},${Libes})

TArchDir   :=${TArchBinDir}${CompVer}

FCFlags    :=$(if ${WARN},$(subst -w ,-warn declarations -warn truncated_source -warn uncalled -warn unused ,${FCFlags}),${FCFlags})
CCFlags    :=$(if ${WARN},$(subst -w ,-wd981 -wd383 -wd1572 -Wall ,${CCFlags}),${CCFlags})

CROSSCOMPILE :=
APPSUFFIX :=
MAKEAPPPREFIX :=
ifeq "${System}" "w64-mingw32"
   CROSSCOMPILE := "x"
   APPSUFFIX := ".exe"
   MAKEAPPPREFIX := $(shell which wine64 2>/dev/null)
endif

#-----------------------------------------------------------------------
# Change Intel -ax options if DEBUG or XHOST are set (order is important
#-----------------------------------------------------------------------
ifdef XHOST
   FCFlags    :=$(shell echo $(FCFlags) | sed 's/[-]ax[^ ]*/-xHost/' )
   CCFlags    :=$(shell echo $(CCFlags) | sed 's/[-]ax[^ ]*/-xHost/' )
endif
ifdef DEBUG
   FCFlags    :=$(shell echo $(FCFlags) | sed 's/[-]ax[^ ]*//' )
   CCFlags    :=$(shell echo $(CCFlags) | sed 's/[-]ax[^ ]*//' )
endif
#
#-----------------------------------------------------------------------
#  Setup the objects for sources
#-----------------------------------------------------------------------
#
LibName:=$(shell echo ${LibName}|sed 's/^lib//'|sed 's/\.a$$//')
DDSEXE :=$(if ${DDSEXE},${DDSEXE},${DDSBIN}/${TArchBinDir})
Library:=$(if ${LibName},${TArchDir}/lib${LibName}.a)
LibMods:=$(if ${LibName},$(shell ls ${TArchDir}/*.mod 2> /dev/null))
Manfile:=$(shell if [ -f "man1/${Name}.1" -o -f "${Name}.1" ]; then echo "man1/${Name}.1"; fi)
CSrcs:= $(strip ${CSrcs} ${${Name}${Libname}CSrcs} ${C+Srcs} ${C++Srcs})
FSrcs:= $(strip ${FSrcs} ${${Name}${LibName}FSrcs} ${F77Srcs} ${F90Srcs})
CObjs:= $(patsubst %.c,   ${TArchDir}/%.o, \
        $(patsubst %.C,   ${TArchDir}/%.o, \
        $(patsubst %.cpp, ${TArchDir}/%.o, \
        $(patsubst %.c++, ${TArchDir}/%.o, ${CSrcs})))) \
        $(if ${Name},${TArchDir}/svn_version.o)
FObjs:= $(patsubst %.F,   ${TArchDir}/%.o, \
        $(patsubst %.f,   ${TArchDir}/%.o, \
        $(patsubst %.for, ${TArchDir}/%.o, \
        $(patsubst %.F90, ${TArchDir}/%.o, \
        $(patsubst %.f90, ${TArchDir}/%.o, ${FSrcs})))))
AllSrcs:= $(strip ${CSrcs} ${FSrcs})
AllObjs:= $(strip ${CObjs} ${FObjs})
Application:=$(if ${Name},$(if ${AllSrcs},${DDSEXE}/${Name}${APPSUFFIX}))

Rev:=$(shell ${SVNVERSION} 2> /dev/null | awk '{print $$1}' |\
   sed 's/[0-9][0-9]*[:]//' | sed 's/exported/0000M/' )
Date:=$(shell date +"%Y-%m-%d %T")
User:=$(if ${USER},${USER},unknown)

#
#-----------------------------------------------------------------------
#  Setup OpenMP/MPI info if requested
#-----------------------------------------------------------------------
#
All:= $(shell ${ROOTBIN}/HostMP -a ${Args})
All:= $(subst ^,^ ,$(shell echo "${All}"|sed -e 's/ /SPACE/g'))
DOMP      :=$(subst ^,,$(subst SPACE, ,$(word  1,${All})))
DOMPF     :=$(subst ^,,$(subst SPACE, ,$(word  2,${All})))
OMPCFlags :=$(subst ^,,$(subst SPACE, ,$(word  3,${All})))
OMPLibDirs:=$(subst ^,,$(subst SPACE, ,$(word  4,${All})))
OMPLibes  :=$(subst ^,,$(subst SPACE, ,$(word  5,${All})))
DMPI      :=$(subst ^,,$(subst SPACE, ,$(word  6,${All})))
DMPIF     :=$(subst ^,,$(subst SPACE, ,$(word  7,${All})))
MPICFlags :=$(subst ^,,$(subst SPACE, ,$(word  8,${All})))
MPILibDirs:=$(subst ^,,$(subst SPACE, ,$(word  9,${All})))
MPILibes  :=$(subst ^,,$(subst SPACE, ,$(word 10,${All})))
MPIRun    :=$(subst ^,,$(subst SPACE, ,$(word 11,${All})))

ifdef MP
   ifneq "$(Vendor)" "gnu"
      CCFlags:= ${CCFlags} ${DOMP}  ${OMPCFlags}
      CLFlags:= ${CLFlags} ${DOMP}  ${OMPCFlags}
   endif
   FCFlags:= ${FCFlags} ${DOMPF} ${OMPCFlags}
   FLFlags:= ${FLFlags} ${DOMPF} ${OMPCFlags}
   LibDirs:= ${LibDirs} ${OMPLibDirs}
   Libes  := ${Libes} ${OMPLibes} 
endif

ifdef MPI
   ifeq "${MPIRun}" ""
      SkipThis:=TRUE
      CSrcs:=
      FSrcs:=
   endif
endif

#
# turn on MPI if mpirun exists and conditional mpi requested
#
ifdef MPIX
   ifneq "${MPIRun}" ""
      MPI:=X
   endif
endif

ifdef MPI
   CCFlags:= ${CCFlags} ${DMPI} ${MPICFlags}
   FCFlags:= ${FCFlags} ${DMPIF} ${MPICFlags}
   LibDirs:= ${LibDirs} ${MPILibDirs}
   Libes  := ${Libes} ${MPILibes} 
endif

########################################################################
#  Setup Special Libraries
########################################################################
#-----------------------------------------------------------------------
#  Specified Projects
#-----------------------------------------------------------------------
   
IncludeDirs:= $(if ${PrjLibs},$(shell for Project in ${PrjLibs}; do \
   echo "-I$${DDSROOT}/include/$${Project} -I$${DDSROOT}/include/$${Project}/${TArchDir} "; done)) ${IncludeDirs}
LibDirs:= $(if ${PrjLibs},$(shell for Project in ${PrjLibs}; do \
   echo "-L$${DDSROOT}/lib/$${Project}/${TArchDir} "; done)) ${LibDirs}

IncludeDirs:= $(if ${PrjDirs},$(shell for Dir in ${PrjDirs}; do \
   echo "-I$${Dir} -I$${Dir}/${TArchDir} "; done)) ${IncludeDirs}
LibDirs:= $(if ${PrjDirs},$(shell for Dir in ${PrjDirs}; do \
   echo "-L$${Dir}/${TArchDir} "; done)) ${LibDirs}

#-----------------------------------------------------------------------
#  USP
#-----------------------------------------------------------------------
ifdef USP
   USPROOT :=$(if ${USPROOT},${USPROOT},\
                  $(error USPROOT not defined, needed for DIST_PRODUCT := usp))

   IncludeDirs:= $(strip -I${USPROOT}/include -I${USPROOT}/include/c \
                          ${IncludeDirs})
   LibDirs    := $(strip  \
			-L${USPROOT}/lib/${TArchBinDir} \
			-L${USPROOT}/lib/${TArchDir}  \
			-L${USPROOT}/lib ${LibDirs})

   ifdef CHOST
      Libes:= $(strip -lut -lieeeio -lcu -larg ${Libes})
   else
      Libes:= $(strip -lut -lieeeio -lfu ${Libes})
   endif
endif

#-----------------------------------------------------------------------
#  NETLIB
#-----------------------------------------------------------------------
ifdef NETLIB
   ifdef CHOST
      CFORT:=CFORT
   endif
   MKL:= $(findstring DMKL,${TargetFlags})
   ifndef MKL
      Libes:= $(strip -llapack -lblas ${Libes})
   endif
endif

#-----------------------------------------------------------------------
#  MATHADV
#-----------------------------------------------------------------------
ifdef MATHADV
   USPROOT:=$(if ${USPROOT},${USPROOT},\
                  $(error USPROOT not defined, needed for MATHADV))

   LibDirs:= $(if ${TRCGP},${LibDirs}, \
             $(strip -L${USPROOT}/lib/${TArchBinDir} \
                     -L${USPROOT}/lib/${TArchDir} ${LibDirs}))
   TRCGP:=trcgp

   IncludeDirs:= $(strip -I${USPROOT}/include ${IncludeDirs})
   Libes:= $(strip ${Libes} -lmathadv)
endif

#-----------------------------------------------------------------------
#  INT
#-----------------------------------------------------------------------
ifdef INT
# INT libs need fortran libraries
   ifdef CHOST
      CFORT:=CFORT
   endif

   INTRoot := $(shell if [ -d /hpc/tstapps/INT ]; then echo /hpc/tstapps/INT/XintR3.5; else echo /houhome/trcgp/int/XintR3.5; fi)

   ifeq "${Vendor}" "sgi"
      INTInclude:= -I${INTRoot}/IRIX
      INTLibDirs:= -L${INTRoot}/lib/${TArchDir}
      INTLibes:= -Bstatic -lINT -lINTC -lINTCGM -lView3D -Bdynamic -lGL -lGLU -ltiff -ljpeg -Bstatic
   endif
   ifeq "${Vendor}" "sun"
      INTInclude:= -I${INTRoot}/Solaris -I/apps/global/SunOS/5/include
      INTLibDirs:= -L${INTRoot}/lib/${TArchDir} -L/apps/global/SunOS/5/lib
      INTLibes:= -lINT -lINTC -lINTCGM -lView3D -lMesaGL -lMesaGLU -ltiff -ljpeg 
   endif
   ifeq "${Vendor}" "intel"
      INTInclude:= -I${INTRoot}/Linux
      INTLibDirs:= -L${INTRoot}/lib/${TArchDir}
      INTLibes:= -lINT -lINTC -lINTCGM -lView3D -lGL -lGLU -ltiff -ljpeg -lz 
   endif

   IncludeDirs:= $(strip ${INTInclude} ${IncludeDirs})
   LibDirs:= $(strip ${INTLibDirs} ${LibDirs})
   Libes:= $(strip ${INTLibes} ${Libes})

   MOTIF:=TRUE
endif

#-----------------------------------------------------------------------
#  LANDMARK
#-----------------------------------------------------------------------
ifdef LNDMRK
 ifneq "${LNDMRK}" "R5K"
   MOTIF:=MOTIF
   ifeq "${Vendor}" "sgi"
      # Can't get new lm12b to work on IRIX so revert back for now
      #OWROOT      := /tstapps/global/IRIX64/6.5/landmark/12b/OpenWorks
      #SeisWorksLib:= ${OWROOT}/swdevkit/lib/IRIX64
      #OracleLib   := ${OWROOT}/oracle/lib
      #DevKitLib   := ${OWROOT}/devkit/lib/
      #LANDMARKLIBES:= -Bdynamic -lclntsh  -lwtc8  -Bstatic -lclient8  -lserver8 \
      #  -lpls8 -lcore8 -lgeneric8  -lcore8 -lserver8 -lcommon8 -lcore8 \
      #  -Bdynamic -lm -ldl -lnsl

      OWROOT      := /home/trcgp/usp/ssam/lm03b
      SeisWorksLib:= ${OWROOT}/swdevkit/lib/IRIX/6.5/IP27/n32
      OracleLib   := ${OWROOT}/oracle/lib
      DevKitLib   := ${OWROOT}/devkit/lib/IRIX/6.5/IP27/n32
      LANDMARKLIBES:= /home/trcgp/usp/ssam/lm03b/devkit/lib/IRIX/6.5/IP27/n32/lm_new.o \
                      /home/trcgp/usp/ssam/lm03b/devkit/lib/IRIX/6.5/IP27/n32/nliSrvrChk.o \
                      -lsdl -lowutils -lgeo -lowutils -ldatman -lowutils \
                      -lgeo -ldatman -lffa -lgeo -lREx -lDsi -lLpi -ldataload \
                      -lingstub -lowhelp -lwid -lsyma -lowcomm -lowenv -llam \
                      -lns -llmgr -lnih -lowenv -Bdynamic -lgpr_ctk -lftn -lfortran 

      TargetFlags:= -LANG:std -woff 131,15,84 -DSYSTEM_FCABS \
                      $(shell echo ${TargetFlags}|sed 's/-64/-n32/'|sed 's/IRIX64/IRIX32/')
   else
      ifeq "${System}" "SunOS"
         OWROOT       := /tstapps/global/SunOS/5.8/landmark/12b/OpenWorks
         SeisWorksLib := ${OWROOT}/swdevkit/lib/SunOS
         OracleLib    := ${OWROOT}/oracle/lib
         DevKitLib    := ${OWROOT}/devkit/lib
         LANDMARKLIBES:= -zmuldefs -Bstatic -lsdl -lowutils -lgeo \
            -lowutils -ldatman -lowutils -lgeo -ldatman -lffa -lgeo \
            -lREx -lDsi -lLpi -ldataload -lingstub -lowhelp -lwid -lsyma \
            -lowcomm -lowenv -lns -lnih -lowenv -lLGC_CommonLicensing \
            -Bdynamic -lgpr_ctk -Bstatic -lsql8 -Bdynamic -lclntsh -lwtc8 \
            -Bstatic -lclient8 -lserver8 -lpls8 -lcore8 -lgeneric8 -lcore8 \
            -lserver8 -lcommon8 -lcore8 -Bdynamic -lm -ldl -lnsl \
            -lF77 -lM77 -lsunmath
      else
         ifeq "${Machine}" "i686"
            OWROOT       := /tstapps/global/Linux/2.4/landmark/12b/OpenWorks
            SeisWorksLib := ${OWROOT}/swdevkit/lib/Linux
            OracleLib    := ${OWROOT}/oracle/lib
            DevKitLib    := ${OWROOT}/devkit/lib
            LANDMARKLIBES:= -Wl,-noinhibit-exec -Xlinker -zmuldefs \
               ${OWROOT}/swdevkit/lib/Linux/libsdl.a \
               -lowutils -lgeo -lowutils -ldatman -lowutils -lgeo \
               -ldatman -lffa -lgeo -lREx -lDsi -lLpi -ldataload -lingstub \
               -lowhelp -lwid -lsyma -lowcomm -lowenv -lns -lnih -lowenv \
               -lLGC_CommonLicensing -lgpr_ctk -lsql8 \
               -lclntsh -lwtc8 -lclient8 -lserver8 -lpls8 \
               -lcore8 -lgeneric8 -lcore8 -lserver8 -lcommon8 -lcore8 \
               -lm -ldl -lnsl -lg2c
         else
            LANDMARKLIBES:=$(error Landmark libraries are only available for IRIX64, SunOS and i686)
         endif
      endif
   endif
 endif
 ifeq "${LNDMRK}" "R5K"
   MOTIF:=MOTIF
   ifeq "${System}" "Linux"
      OWROOT       := $(shell if [ -d /hpc/tstapps/LGC/R5000.8.0.0 ]; then echo /hpc/tstapps/LGC/R5000.8.0.0; else echo /hpc/soft/user/src/R5000_SDK; fi)
      SeisWorksLib := ${OWROOT}/swdevkit/lib64
      OracleLib    := ${OWROOT}/oracle/lib
      DevKitLib    := ${OWROOT}/devkit/lib64
      LANDMARKLIBES:= -Wl,-noinhibit-exec -Xlinker -zmuldefs \
	-lLGCsdl -lLGCsda -lLGChsf -lgpr_ctk \
	-lLGCbase -lcartointf -lowdevkit -lGeoCalcPBW -lGeoCalc -lxerces-c -lzgf \
        -ldl -lnsl
     else
       LANDMARKLIBES:=$(error Landmark R5000 libraries are only available for Linux x86_64 )
     endif
   endif

   DevKitInclude   := ${OWROOT}/devkit/include
   DevKitLamInclude:= ${OWROOT}/devkit/include/lam
   DevKitCartoInclude:= ${OWROOT}/devkit/include/ow/cartoincl
   SeisWorksInclude:= ${OWROOT}/swdevkit/include
   IncludeDirs     := $(strip -I${DevKitInclude} -I${SeisWorksInclude} \
                      ${IncludeDirs} -I${DevKitLamInclude} -I${DevKitCartoInclude})

   ifeq "${ProMaxLib}" ""
     LibDirs:= $(strip -L${SeisWorksLib} -L${DevKitLib} -L${OracleLib} ${LibDirs})
   else
     LibDirs:= $(strip -L${SeisWorksLib} -L${DevKitLib} -L${ProMaxLib} -L${OracleLib} ${LibDirs})
   endif
   Libes  := $(strip ${LANDMARKLIBES} ${Libes})
endif

#-----------------------------------------------------------------------
#  MOTIF
#-----------------------------------------------------------------------
ifdef MOTIF
   ifeq "${System}" "Linux"
#     /usr/X11R6/LessTif/Motif1.2
      IncludeDirs:= $(strip -I/usr/X11R6/include ${IncludeDirs})

      ifeq "$(findstring ppc64,${Machine})" "ppc64"
         Libes:= $(strip ${Libes} -lXm -lpthread -lc)
      else
#
#        Libes:= $(strip ${Libes} -lXm -lXt -lX11 -lXmu -lSM -lICE -lXext -lXp -lpthread -lc)
#        -lGL -lGLU need to be linked in AFTER X11 libraries if X11 libraries are to be static
#        otherwise rage will segfault 
#
#        Libes:= $(strip -lXm -lXt -lX11 -lXmu -lSM -lICE -lXext -lXp -Bdynamic -lGL -lGLU -lpthread -lc ${Libes})
         LibXp:= ${shell ( ls -d /usr/lib/libXp.* > /dev/null 2>&1 ) && echo "-lXp" }
         Libes:= $(strip -lXm -lXt -lX11 -lXmu -lSM -lICE -lXext ${LibXp} ${Libes})
      endif

      ifeq "${Machine}" "i686"
         LibDirs:= $(strip -L/usr/X11R6/lib ${LibDirs})
      else
         LibDirs:= $(strip -L/usr/X11R6/lib64 -L/usr/X11R6/lib ${LibDirs})
      endif
   else
      ifeq "${System}" "SunOS"
         IncludeDirs:= $(strip -I/usr/dt/include -I/usr/openwin/include \
                               -I/usr/include/X11R6 ${IncludeDirs})
         LibDirs    := $(strip -L/usr/dt/lib -L/usr/openwin/lib \
                               -L/usr/lib/X11R6 ${LibDirs})
         Libes:= $(strip -Bdynamic -lXm -lXt -lX11 ${Libes})
      else
         IncludeDirs:= $(strip -I/usr/include/X11R6 ${IncludeDirs})
         LibDirs    := $(strip -L/usr/lib/X11R6 ${LibDirs})
         Libes:= $(strip -Bdynamic -lXm -lXt -lX11 ${Libes})
      endif
   endif
endif

#-----------------------------------------------------------------------
#  TESTDDS
#-----------------------------------------------------------------------
ifdef TESTDDS
   VARCH:=${ArchName}${CompExt}
   VARCH:=${VARCH}$(shell if [ "${VARCH}" = "IRIX64" ]; then echo "-`uname -m`"; fi)
   IncludeDirs:= $(strip -I${DDSROOT}/src/lib/host  -I${DDSROOT}/src/lib/host/${VARCH}${HOSTG} \
                         -I${DDSROOT}/src/lib/dds3  -I${DDSROOT}/src/lib/dds3/${VARCH}${DDS3G} \
                         -I${DDSROOT}/src/lib/gio \
                         -I${DDSROOT}/include/${TArchDir} -I${DDSROOT}/include ${IncludeDirs})
   LibDirs    := $(strip -L${DDSROOT}/src/lib/host/${VARCH}${HOSTG} -L${DDSROOT}/src/lib/gio/${VARCH}${GIOG} \
                         -L${DDSROOT}/src/lib/dds3/${VARCH}${DDS3G} -L${DDSROOT}/src/lib/fft/${VARCH}${FFTG} \
                         -L${DDSROOT}/src/lib/fftw/fftw/${VARCH}-single/.libs \
                         -L${DDSROOT}/src/lib/fftw/fftw/${VARCH}-double/.libs ${LibDirs})

else
   ifndef NODDSLIBS
      IncludeDirs:= $(strip -I${DDSROOT}/include/${TArchDir} \
                         -I${DDSROOT}/include ${IncludeDirs})
      LibDirs    := $(strip -L${DDSROOT}/lib/${TArchDir} ${LibDirs})
      xist       := $(shell if [ ! -d "${DDSROOT}/lib/${TArchDir}" ]; then echo NONE 2> /dev/null; fi)
      ifeq "${xist}" "NONE"
         error:=$(error DDS not built for this architecture: ${TArchDir})
      endif
   endif
endif

#-----------------------------------------------------------------------
#  NODDS
#-----------------------------------------------------------------------
ifndef NODDS
   ifdef CHOST
      Libes:= $(strip -ldds_r3$(DDS3G) -lgio$(GIOG) -lchost$(HOSTG) ${Libes})
   else
      Libes:= $(strip -ldds_r3$(DDS3G) -lgio$(GIOG) -lfhost$(HOSTG) ${Libes})
   endif
endif

########################################################################
#  Setup architecture-dependent options
########################################################################
#-----------------------------------------------------------------------
#  SunOS
#-----------------------------------------------------------------------
ifeq "${System}" "SunOS"
   ifdef CFORT
      ArchLibes:=-Bstatic -lF77 -lM77 -lsunmath -Bdynamic -ldl \
                 -lsocket -lnsl
   else
      ifdef F90
         IncludeDirs:= $(strip -M${DDSROOT}/include/${TArchDir} ${IncludeDirs})
         ArchLibes:=-Bstatic -lF77 -lM77 -lsunmath -Bdynamic -ldl \
                    -lsocket -lnsl
      else
         ArchLibes:=-Bdynamic -ldl -lsocket -lnsl 
      endif
   endif

   ifdef FFT
      ifdef CHOST
         Libes:= ${Libes} -Bstatic -lF77 -lM77 -lsunmath -Bdynamic -ldl -lsocket -lnsl -Bstatic
      endif
   endif

   ifdef DEBUG
      OPTF:=-g ${Undef}
      OPTC:=-g
   else
      ifdef INLINE
         OPTF:=-O4 ${Undef}
         OPTC:=-xO4 
      else
         ifdef O1
            OPTF:=-O1 ${Undef}
            OPTC:=-xO1
         else
            ifdef O2
              OPTF:=-O2 ${Undef}
              OPTC:=-xO2
	    else
              OPTF:=-O3 ${Undef}
              OPTC:=-xO3
            endif
         endif 
      endif
      ifndef NOGOPT
         OPTF:= ${OPTF} -g
         OPTC:= ${OPTC} -g
      endif
   endif

   ifeq "${Machine}" "i86pc"
      OPTF:=${OPTF} -DSWAP
      OPTC:=${OPTC} -DSWAP
   endif
endif 

#-----------------------------------------------------------------------
#  IRIX64
#-----------------------------------------------------------------------
ifeq "${System}" "IRIX64"
   ifdef CFORT
      ArchLibes:= -lftn 
   endif

   ifdef DEBUG
      OPTF:=-g ${Undef}
      OPTC:=-g
   else
      ifdef O1
         OPTF:=-O1 -OPT:Olimit=0 ${Undef}
         OPTC:=-O1 
      else
         ifdef O2
            OPTF:=-O2 -OPT:Olimit=0 ${Undef}
            OPTC:=-O2 
         else
            OPTF:=-O3 -OPT:Olimit=0 ${Undef}
            OPTC:=-O3
         endif
      endif
      ifndef NOGOPT
         OPTF:= ${OPTF} -g
         OPTC:= ${OPTC} -g
      endif
   endif 
endif

#-----------------------------------------------------------------------
#  Linux (ia32)
#-----------------------------------------------------------------------
ifeq "${Machine}" "i686"
   ifdef FFT
      ifndef MP
         ifndef FFTW
            MP:=FFT
            CLFlags:= ${CLFlags} ${DOMP} ${OMPCFlags}
            FLFlags:= ${FLFlags} ${DOMP} ${OMPCFlags}
            LibDirs:= ${LibDirs} ${OMPLibDirs}
            Libes:= ${OMPLibes} ${Libes}
         endif
      endif
   endif

   ifeq "${Vendor}" "intel"
      ifeq "${CompLevel}" "9"
         ifdef CHOST
            ifdef MP
               ArchLibes:= -lifcoremt -lc
            else
               ArchLibes:= -lifcore -lc
            endif
         endif
      endif
   endif

   ifdef DEBUG
      OPTF:=-DSWAP -g 
      OPTC:=-DSWAP -g
   else
      ifdef O1
         OPTF:=-DSWAP -O1
         OPTC:=-DSWAP -O1 
      else
         OPTF:=-DSWAP -O2
         OPTC:=-DSWAP -O2 
      endif
      ifndef NOGOPT
         OPTF:= ${OPTF} -g
         OPTC:= ${OPTC} -g
      endif
   endif

   ifdef INLINE
      OPTF:= $OPTF -Minline 
      OPTC:= $OPTC -Minline
   endif
endif

#-----------------------------------------------------------------------
#  Linux (x86_64)
#-----------------------------------------------------------------------
ifeq "${Machine}" "x86_64"
   ifdef FFT
      ifndef MP
         ifndef FFTW
            MP:=FFT
            CLFlags:= ${CLFlags} ${DOMP} ${OMPCFlags}
            FLFlags:= ${FLFlags} ${DOMP} ${OMPCFlags}
            LibDirs:= ${LibDirs} ${OMPLibDirs}
            Libes:= ${OMPLibes} ${Libes}
         endif
      endif
   endif

   ifeq "${Vendor}" "intel"
      ifeq "${CompLevel}" "9"
         ifdef CHOST
            ifdef MP
               ArchLibes:= -lifcoremt -lc
            else
               ArchLibes:= -lifcore -lc
            endif
         endif
      endif
   endif

   ifdef DEBUG
      OPTF:=-DSWAP -g -O0
      OPTC:=-DSWAP -g -O0
      ifeq "${Vendor}" "intel"
         OPTF:= ${OPTF} -traceback
         OPTC:= ${OPTC} -traceback
      endif
   else
      ifdef O1
         OPTF:=-DSWAP -O1
         OPTC:=-DSWAP -O1
      else
         ifdef O2
           OPTF:=-DSWAP -O2
           OPTC:=-DSWAP -O2
         else
           OPTF:=-DSWAP -O3
           OPTC:=-DSWAP -O3
         endif
      endif
      ifndef NOGOPT
         OPTF:= ${OPTF} -g
         OPTC:= ${OPTC} -g
      endif
   endif

   ifeq "$(Vendor)" "gnu"
         OPTF:= ${OPTF} -fbacktrace
   endif

   ifdef INLINE
      OPTF:= ${OPTF} -Minline 
      OPTC:= ${OPTC} -Minline
   endif
endif

#-----------------------------------------------------------------------
#  Linux (ia64) 
#-----------------------------------------------------------------------
ifeq "${Machine}" "ia64"
   ifdef FFT
      ifndef MP
         ifndef FFTW
            MP:=FFT
            CLFlags:= ${CLFlags} ${DOMP} ${OMPCFlags}
            FLFlags:= ${FLFlags} ${DOMP} ${OMPCFlags}
            LibDirs:= ${LibDirs} ${OMPLibDirs}
            Libes:= ${OMPLibes} ${Libes}
         endif
      endif
   endif

   ifeq "${Vendor}" "intel"
      ifeq "${CompLevel}" "9"
         ifdef CHOST
            ifdef MP
               ArchLibes:= -lifcoremt -lc
            else
               ArchLibes:= -lifcore -lc
            endif
         endif
      endif
   endif

   ifdef DEBUG
      OPTF:=-DSWAP -g
      OPTC:=-DSWAP -g
   else
      ifdef O1
         OPTF:=-DSWAP -O1
         OPTC:=-DSWAP -O1
      else
         ifdef O2
           OPTF:=-DSWAP -O2
           OPTC:=-DSWAP -O2
         else
           OPTF:=-DSWAP -O3
           OPTC:=-DSWAP -O3
         endif
      endif
      ifndef NOGOPT
         OPTF:= ${OPTF} -g
         OPTC:= ${OPTC} -g
      endif
   endif

   ifdef INLINE
      OPTF:= $OPTF -ipo
      OPTC:= $OPTC -ipo
   endif 
endif

#-----------------------------------------------------------------------
#  Linux (ppc64)
#-----------------------------------------------------------------------
ifeq "$(findstring ppc64,${Machine})" "ppc64"
   ifdef FFT
      ifndef MP
         ifndef FFTW
            MP:=FFT
            CLFlags:= ${CLFlags} ${DOMP} ${OMPCFlags}
            FLFlags:= ${FLFlags} ${DOMP} ${OMPCFlags}
            LibDirs:= ${LibDirs} ${OMPLibDirs}
            Libes:= ${OMPLibes} ${Libes}
         endif
      endif
   endif

   ifdef DEBUG
      OPTF:=-g -qsuppress=1513-029
      OPTC:=-g
   else
      ifdef O1
         OPTF:=-O1 -qsuppress=1513-029
         OPTC:=-O1
      else
         ifdef O2
            OPTF:=-O2 -qsuppress=1513-029
            OPTC:=-O2
         else
            OPTF:=-O3 -qsuppress=1513-029:1500-036
            OPTC:=-O3
#           OPTF:=-O3 -qsuppress=1513-029 -qstrict
#           OPTC:=-O3 -qsuppress=1513-029 -qstrict
         endif
      endif
      ifndef NOGOPT
         OPTF:= ${OPTF} -g
         OPTC:= ${OPTC} -g
      endif
   endif
endif

#-----------------------------------------------------------------------
#  HP-UX (ia64)
#-----------------------------------------------------------------------
ifeq "${System}" "HP-UX"
   ifdef DEBUG
      OPTF:=-g +escape
      OPTC:=-g
   else
      ifdef O1
         OPTF:= +O1 +escape
         OPTC:= +O1
      else
         ifdef O2
            OPTF:= +O2 +escape
            OPTC:=
         else
            OPTF:=+O3 +escape
            OPTC:=
         endif
      endif
   endif
endif

########################################################################
#  Setup compile & link commands
########################################################################

LibDirs:= $(strip ${LibDirs})
CCFlags:= $(strip ${CCFlags} ${OPTC})
FCFlags:= $(strip ${FCFlags} ${OPTF})
CLFlags:= $(strip ${CLFlags} ${OPTC})
FLFlags:= $(strip ${FLFlags} ${OPTF})

# For C++, change -DMPI to -DMPI_MODE because it conflicts with MPI
C++CFlags:= $(subst -DMPI,-DMPI_MODE,${CCFlags})
C++LFlags:= ${CLFlags}
F90CFlags:= ${FCFlags} 
F90LFlags:= ${FLFlags}

Libes:= $(if ${Libs},$(shell for lib in ${Libs}; do \
   echo "-l$${lib} "; done)) ${Libes}

ifdef C+HOST
   LINK = ${LinkC++}
   Libes:= $(strip ${Libes} ${CLibes} ${ArchLibes} )
   ifneq "${Vendor}" "pgi"
     Libes:= $(strip ${Libes} -lm)
   endif
else
ifdef CHOST
   LINK = ${LinkC}
   Libes:= $(strip ${Libes} ${CLibes} ${ArchLibes} )
   ifneq "${Vendor}" "pgi"
     Libes:= $(strip ${Libes} -lm)
   endif
else
ifdef F90
   LINK = ${LinkF90}
   Libes:= $(strip ${Libes} ${FLibes} ${ArchLibes})
else
   LINK = ${LinkF}
   Libes:= $(strip ${Libes} ${FLibes} ${ArchLibes})
endif
endif
endif

#
#  Define Compiler & Link commands as recursive variables
#  (so users can change variables)
#
CompileC   = $(strip ${CC} -c ${TargetFlags} ${IncludeDirs} ${CCFlags})

LinkC      = $(strip ${CLD} ${TargetFlags} ${CLFlags})

CompileC++ = $(strip ${C++C} -c ${TargetFlags} ${IncludeDirs} ${C++CFlags})

LinkC++    = $(strip ${C++LD} ${TargetFlags} ${C++LFlags})

CompileF   = $(strip ${FC} -c ${TargetFlags} ${IncludeDirs} ${FCFlags})

LinkF      = $(strip ${FLD} ${TargetFlags} ${FLFlags})

CompileF90 = $(strip ${F90C} -c ${TargetFlags} ${IncludeDirs} ${F90CFlags})

LinkF90    = $(strip ${F90LD} ${TargetFlags} ${F90LFlags})

