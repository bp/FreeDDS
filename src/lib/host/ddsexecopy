#! /bin/sh
##################################################################
#               copyright 2007, BP America Inc.                  #
#                     All Rights Reserved                        #
##################################################################
#
#  script to copy executable to the appropriate distribution subdirectory
#
if [ "${DDS_DEBUG}" = "TRUE" ]; then
 set -x
 echo '*************** ddsexecopy  ***************'
fi

help="false"

if [ "$#" = 0 ]; then
  help="true"
else

  PRGM_DIR=`pwd`
  : ${DDSROOT:?}

  prg=$1
  shift 1
#
# check other options
#
  for arg do
   case $arg in
      dist_product=*) eval $arg; shift 1;; 
      help=*) help="true"; shift 1;; 
      *=*);;
      *) case $prev in
            dist_product=)  eval ${prev}${arg}; shift 1;; 
         esac
   esac
   prev=$arg
  done
fi

if [ "${help}" = "true" ]; then
	echo " "
	echo "ddsexecopy: copy an executable into appropriate tstapps directory"
	echo " "
	echo "Usage:"
	echo '        ddsexecopy [program name] [dist_product=(usp|mbs|drtk|..)]'
	echo " "
        echo "Where: "
        echo '          dist_product=: distribution product (default=mbs)'
	exit 1
fi

# For FreeDDS installations, the ${DDSROOT}/FreeDDS directory will not
# be present. Using that detail to determine FreeDDS vs BP installations.
if [ -d ${DDSROOT}/FreeDDS ]; then
  CHPC_HOST=""
  CAMPUS_HOST=""
# CAMPUS_HOST=""
  DIST_ID=""
#
# In the CHPC, /hpc/tstapps and /tstapps are the same, but we need to use 
# /tstapps for DDS_DIST for remote instructions to Houston outside the CHPC
#
  if [ -d /hpc/tstapps ]; then 
    DDS_DIST=${DDS_DIST:-/tstapps/asi}
  fi
  unset FreeDDS
else
  FreeDDS="TRUE"
fi

if [ "${DDS_DIST:=not set}" = "not set" ]; then
  echo DDS_DIST not set
elif [ ! -d ${DDS_DIST} ]; then
  echo DDS_DIST directory ${DDS_DIST} not found
fi
: ${USP:=${DDS_DIST}}
DIST_PRODUCT=${dist_product:=mbs}
TARCH=`${DDSROOT}/bin/HostDir -b dist_product=${DIST_PRODUCT}`
APPS_BIN=${DDS_DIST}/`${DDSROOT}/bin/HostDir -x dist_product=${DIST_PRODUCT}`
MACHINE=`uname -n`
exe="bin/${TARCH}/$prg"
target="${APPS_BIN}/$prg"
symexe=`echo $prg | sed 's/[.]rev.*$//'`
if [ "${symexe}" = "${prg}" ]; then
  unset symexe
fi

if [ -z ${FreeDDS} ]; then
  ANS=`ssh -f -x -o NumberOfPasswordPrompts=0 -l ${DIST_ID} ${CHPC_HOST} hostname`

  if [ -z ${ANS} ]; then
    echo '**********************************************************************'
    echo '* You do not have DDS install privileges; contact system admins      *'
    echo '* for approval                                                       *'
    echo '**********************************************************************'
    exit 1
  fi

#
# Make sure we have a distribution binary directories. Inside BP, the revision suffixing
# precludes the need for the unlinked directory for temporary storage of old binaries.
#
  umask 2
  ssh -x -l ${DIST_ID} ${CHPC_HOST} "test -d ${APPS_BIN} || mkdir -p ${APPS_BIN}"
  ssh -x -l ${DIST_ID} ${CAMPUS_HOST} "test -d ${APPS_BIN} || mkdir -p ${APPS_BIN}"
else
  test -d ${APPS_BIN} || mkdir -p ${APPS_BIN}
  test -d ${APPS_BIN}/unlinked || mkdir -p ${APPS_BIN}/unlinked
  find ${APPS_BIN}/unlinked -type f ! -name '.nfs*' -perm -1 -mtime +90 \
    -exec echo removing {} \; -exec rm {} \;
fi

#
# Check if we need to install binary
#
if [ ! -f ${exe} ]; then
   echo ${exe} not found!
   exit 0
elif [ -f ${APPS_BIN}/${symexe} ]; then
   status=`cmp ${exe} ${target} > /dev/null 2>&1`
   if [ $? -eq 0 ]; then
      echo "Binary already updated: ${exe} ==> ${target}"
      exit 0
   fi
   echo "Updating binary: ${exe} ==> ${target}"
else
   echo "Installing binary: ${exe} ==> ${target}"
fi

#
# Copy the binary to the installation structure
# (Save any previous version)
#

if [ -z ${FreeDDS} ]; then
# If an old binary exists without the revision suffix, archive it using .rev0001
# Installed binary should be pointed to by symlink without revision suffix. If we
# cannot accomplish that, abort

  if [ ${symexe} ]; then
    cd ${APPS_BIN}
    if [ -L ${symexe} ]; then
      ssh -x -l ${DIST_ID} ${CHPC_HOST} rm -f ${APPS_BIN}/${symexe}
      if [ $? -ne 0 ]; then
        ls -ld ${APPS_BIN}/${symexe}
        echo "Unable to remove symlink ${APPS_BIN}/${symexe}; Aborting"
        exit 1
      fi
      ssh -x -l ${DIST_ID} ${CAMPUS_HOST} "test -L ${APPS_BIN}/${symexe} && rm -f ${APPS_BIN}/${symexe}"
    elif [ -f ${symexe} ]; then
      ssh -x -l ${DIST_ID} ${CHPC_HOST} mv ${symexe} ${symexe}.rev0001
      if [ $? -ne 0 ]; then
        ls -ld ${APPS_BIN}/${symexe}
        echo "Unable to move old binary ${APPS_BIN}/${symexe} to ${APPS_BIN}/${symexe}.rev0001; Aborting"
        exit 1
      fi
      ssh -x -l ${DIST_ID} ${CAMPUS_HOST} "test -f ${APPS_BIN}/${symexe} && mv ${APPS_BIN}/${symexe} ${APPS_BIN}/${symexe}.rev0001"
    fi
    echo " "
    echo "Setting symlink: ${symexe} -> ${prg} in ${APPS_BIN}"
    ssh -x -l ${DIST_ID} ${CHPC_HOST} "cd ${APPS_BIN} ; ln -f -s ${prg} ${symexe}"
    ssh -x -l ${DIST_ID} ${CAMPUS_HOST} "cd ${APPS_BIN} ; ln -f -s ${prg} ${symexe}"
    cd ${PRGM_DIR}
  fi

  echo "${exe}" '=>' " ${DDS_DIST}:"
  scp ${exe} ${DIST_ID}@${CHPC_HOST}:${target}
  ssh -x -l ${DIST_ID} ${CHPC_HOST} "test -f ${target} && chmod 775 ${target}"
  echo "${exe}" '=> campus ' " ${DDS_DIST}:"
  scp ${exe} ${DIST_ID}@${CAMPUS_HOST}:${target}
  ssh -x -l ${DIST_ID} ${CAMPUS_HOST} "test -f ${target} && chmod 775 ${target}"
else
  if [ -x ${target} ]; then
    timestamp="`date +'%y%j%H%M%S'`"
    mv ${target} ${APPS_BIN}/unlinked/$1.$timestamp
  fi
  cp ${exe} ${target}
  chmod 775 ${target}
fi

#
# Log this installation
#
LOG=${DDS_DIST}/src/dds/DDSLog/INSTALL.log
TMP=${DDS_DIST}/src/dds/DDSLog/INSTALL.log.tmp$$
if  [ -w "${LOG}" ]; then
   nlines=`wc -l < ${LOG} 2> /dev/null`
   if [ ${nlines} -gt 100000 ]; then
      rm -f ${TMP} &> /dev/null
      touch ${LOG} 2> /dev/null
      tail -1000 ${LOG} >> ${TMP} 2> /dev/null
      mv -f ${TMP} ${LOG} &> /dev/null
      chmod 666 ${LOG} &> /dev/null
   fi
   echo `\date +"%b %d, %Y:"` "${target}(${USER})" >> ${LOG} 2>&1
fi

