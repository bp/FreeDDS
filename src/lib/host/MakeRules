########################################################################
#                      copyright 2010, BP America                      #
#                          All Rights Reserved                         #
########################################################################
#
# Use: "make help" for options
#
########################################################################
#
#  Macros
#
########################################################################
#
#  MakeTArchDir creates the appropriate architecture subdirectory.
#     It is called for every source file before a compile attempts to 
#     create a .o file in that subdirectory.  The overhead of having 
#     it called many times seems worth not having compiles break
#     because of missing subdirectories. Also, if DEBUG selected flag
#     it; otherwise if had been flagged remove all objects and flag.
#
define  MakeTArchDir
   @if [ ! -w ${TArchDir} ]; then \
      echo "mkdir -p ${TArchDir}"; \
      mkdir -p ${TArchDir};\
   fi
   @if [ ${DIST_PRODUCT} = "usp" -a ! -f date.h ]; then \
      ${USPROOT}/bin/usp_d_stamp;\
   fi
endef

#
#  MakeTArchBinDir creates the appropriate architecture subdirectory
#     for the executable binary.  It is called before each link to
#     prevent failed links because of missing subdirectories. 
#     if DDS3G selected, flag it; otherwise if had been flagged remove 
#     binary and flag.
#
define  MakeTArchBinDir
	@if [ ! -w ${DDSEXE} ]; then \
      echo "mkdir -p ${DDSEXE}"; \
      mkdir -p ${DDSEXE};\
   fi
endef 

########################################################################
#
#  Main Rules
#
########################################################################
.PHONY: allinstall allupdate allclean bin man distribute remove tests testresults

ifdef SkipThis
targets:
	# Skip making MPI with no mpirun available
else
targets: erase ${Application} ${Library} bin
	@LOG=$(shell if [ -d /tstapps/asi ]; then echo /tstapps/asi/src/dds/DDSLog/MakeLog; else echo /tstapps/global/src/DDSLog/MAKE.log; fi);\
	TMP=${LOG}.tmp$$$$;\
	if  [ -w "$${LOG}" ]; then\
	   nlines=`wc -l < $${LOG} 2> /dev/null`;\
	   if [ $${nlines} -gt 10000 ]; then\
	      rm -f $${TMP} &> /dev/null;\
	      touch $${LOG} 2> /dev/null;\
	      tail -1000 $${LOG} >> $${TMP} 2> /dev/null;\
	      mv -f $${TMP} $${LOG} &> /dev/null;\
	      chmod 666 $${LOG} &> /dev/null;\
	   fi;\
	   echo `\date +"%b %d, %Y"` `\hostname`"(${USER}):" >> $${LOG} 2>&1;\
	fi
endif

all :
	@echo running ${ROOTBIN}/makeremotes $(DDSMODULE) $(MAKE) -$(strip $(filter-out --,$(filter-out ${MAKEOVERRIDES},${MAKEFLAGS}))) ${MAKEOVERRIDES}
	@${ROOTBIN}/makeremotes $(DDSMODULE) $(MAKE) -$(strip $(filter-out --,$(filter-out ${MAKEOVERRIDES},${MAKEFLAGS}))) ${MAKEOVERRIDES}
	@if [ "${Name}" ]; then\
       find bin -noleaf -name ${Name} -exec ls -tl {} \; ;\
    else\
       find . -noleaf -name lib${LibName}.a -exec ls -tl {} \; ;\
    fi

install: chkInstallDebug chkVersInstall chkMan update installbin installman

allinstall: chkInstallDebug chkStatus chkMan allupdate installbin installman

allupdate:
	@echo running ${ROOTBIN}/makeremotes $(DDSMODULE) $(MAKE) -$(strip $(filter-out --,$(filter-out ${MAKEOVERRIDES},${MAKEFLAGS}))) ${MAKEOVERRIDES} update

	@${ROOTBIN}/makeremotes $(DDSMODULE) $(MAKE) \
         -$(strip $(filter-out --,$(filter-out ${MAKEOVERRIDES},${MAKEFLAGS}))) ${MAKEOVERRIDES} update
	@if [ "${Name}" ]; then\
      ls -Fatl ${DIST_ROOT}${ASI}/*/*/${DIST_PRODUCT}/prod/*/${Name} ${DIST_ROOT}${ASI}/*/*/${DIST_PRODUCT}/prod/*/${Name}.rev${Rev} |grep -v sunos;\
   else\
      if [ "${LibHdrs}" ]; then \
        if [ "${PrjName}" ]; then \
          ls -l ${DDSROOT}/include/${PrjName}/${LibHdrs}; \
        else \
          ls -l ${DDSROOT}/include/${LibHdrs}; \
        fi;\
      fi;\
      if [ "${DIST_PRODUCT}" = "mbs" ]; then \
        if [ "${PrjName}" ]; then \
          ls -tl ${DDSROOT}/lib/${PrjName}/[A-Z][a-z]*/[0-9].[0-9]*/*/*/lib${LibName}.a; \
        else \
          ls -tl ${DDSROOT}/lib/[A-Z][a-z]*/[0-9].[0-9]*/*/*/lib${LibName}.a; \
        fi; \
      elif [ "${DIST_PRODUCT}" = "usp" ]; then ls -tl ${USPROOT}/lib/[A-Z][a-z]*/[0-9].[0-9]*/*/*/lib${LibName}.a;fi;\
   fi

clean: 
	rm -f \
             $(shell if [ "${Application}" != "" ]; then \
             echo ${Application}; if [ "${Rev}" != "" ]; \
             then echo ${Application}.rev${Rev}; fi; fi) \
             ${Library} ${TArchDir}/* mklog* 

cleantests:
	@rm -rf TestLog* testresults

allclean: 
	@rm -rf bin mklog* TestLog* testresults
	@find . -name '*.o' -exec rm -f {} \;
	@find . -name '.debug' -exec rm -f {} \;
	@find . -name '.check' -exec rm -f {} \;

bin: 
	@if [ "${Name}" ]; then\
      ${ROOTBIN}/makebinscript ${Name} ${BINTYPE} dist_product="${DIST_PRODUCT}";\
   fi

man: 
	@if [ "${Name}" -a ! -f man1/${Name}.1 ]; then\
      ${ROOTBIN}/dds2man ${Name} ${AllSrcs};\
   fi

ifdef Name
distribute: 
	${ROOTBIN}/distribute ${Name}
else
distribute: 
	# Nothing to distribute for Libraries
endif

remove:
	@if [ "${AllObjs}" -a "${Name}" ]; then\
      echo "${CHPC_SSH} rm -f ${DIST_ROOT}/bin/${Name} ${DIST_ROOT}/man/${DIST_PRODUCT}/man1/${Name}\
         ${DIST_ROOT}/man/${DIST_PRODUCT}/cat1/${Name} ${DIST_ROOT}/*/*/${DIST_PRODUCT}/prod/*/${Name}";\
      ${CHPC_SSH} rm -f ${DIST_ROOT}/bin/${Name} ${DIST_ROOT}/man/${DIST_PRODUCT}/man1/${Name}\
         ${DIST_ROOT}/man/${DIST_PRODUCT}/cat1/${Name} ${DIST_ROOT}/*/*/${DIST_PRODUCT}/prod/*/${Name};\
      echo "${HOU_SSH} rm -f ${DIST_ROOT}/bin/${Name} ${DIST_ROOT}/man/${DIST_PRODUCT}/man1/${Name}\
         ${DIST_ROOT}/man/${DIST_PRODUCT}/cat1/${Name} ${DIST_ROOT}/*/*/${DIST_PRODUCT}/prod/*/${Name}";\
      ${HOU_SSH} rm -f ${DIST_ROOT}/bin/${Name} ${DIST_ROOT}/man/${DIST_PRODUCT}/man1/${Name}\
         ${DIST_ROOT}/man/${DIST_PRODUCT}/cat1/${Name} ${DIST_ROOT}/*/*/${DIST_PRODUCT}/prod/*/${Name};\
   elif [ "${AllObjs}" -a "${LibName}" ]; then\
     if [ "${PrjName}" != "" ]; then\
       echo "${CHPC_SSH} rm -f ${DDSROOT}/lib/${PrjName}/${Library}";\
       ${CHPC_SSH} rm -f ${DDSROOT}/lib/${PrjName}/${Library};\
       echo "${HOU_SSH} rm -f ${DDSROOT}/lib/${PrjName}/${Library}";\
       ${HOU_SSH} rm -f ${DDSROOT}/lib/${PrjName}/${Library};\
       if [ "${LibHdrs}" != "" ]; then \
          echo "rm ${LibHdrs} in  ${DDSROOT}/include/${PrjName}"; \
          cd  ${DDSROOT}/include/${PrjName}; rm ${LibHdrs}; \
       fi; \
     else\
       echo "rm -f ${DDSROOT}/lib/${Library}";\
       rm -f ${DDSROOT}/lib/${Library};\
       if [ "${LibHdrs}" != "" ]; then \
          echo "rm ${LibHdrs} in ${DDSROOT}/include"; \
          cd  ${DDSROOT}/include; rm ${LibHdrs}; \
       fi; \
     fi; \
   fi

localtests:
	@if [ ! "${Name}" ]; then echo "\"Name\" not defined";else\
	   export DDS_TESTS DDS_TEST_VER DDS_TEST_DIR; \
           DDS_TESTS=${DDS_TESTS}; \
           DDS_TEST_VER=${DDS_TEST_VER}; \
           DDS_TEST_DIR=${DDS_TEST_DIR}; \
           ${ROOTBIN}/testdriver ${Name} ${TESTDATA}; fi

testresults:
	@${DDSROOT}/bin/buildtestresults

tests: localtests testresults

alltests:
	@rm -f TestLog*
	@echo running ${ROOTBIN}/makeremotes $(DDSMODULE) $(MAKE) localtests \
         $${DDS_TESTS:+DDS_TESTS="'${DDS_TESTS}'"} \
         $${DDS_TEST_VER:+DDS_TEST_VER="'${DDS_TEST_VER}'"} \
         $${DDS_TEST_DIR:+DDS_TEST_DIR="'${DDS_TEST_DIR}'"} \
         -$(strip $(filter-out --,$(filter-out ${MAKEOVERRIDES},${MAKEFLAGS}))) ${MAKEOVERRIDES}
	@${ROOTBIN}/makeremotes $(DDSMODULE) $(MAKE) localtests \
          $${DDS_TESTS:+DDS_TESTS="'${DDS_TESTS}'"} \
          $${DDS_TEST_VER:+DDS_TEST_VER="'${DDS_TEST_VER}'"} \
          $${DDS_TEST_DIR:+DDS_TEST_DIR="'${DDS_TEST_DIR}'"} \
          -$(strip $(filter-out --,$(filter-out ${MAKEOVERRIDES},${MAKEFLAGS}))) ${MAKEOVERRIDES}
	@${DDSROOT}/bin/buildtestresults

newtest:
	@$(shell mkdir -p tests; cd tests; n=1; \
	         while [ -f test$${n} ]; do n=`expr $${n} + 1`; done; \
	         tst=test$${n}; \
                 if [ "${TSTSHELL}" = "csh" -o "${TSTSHELL}" = "tcsh" ]; then \
                    tstshl=csh; \
                 else \
                    tstshl=sh; \
                 fi; \
	         cat $${DDSROOT}/etc/testtemplate.$${tstshl}|\
                    sed s/NNN/$${n}/|sed s/TSTSHELL/${TSTSHELL}/ > $${tst}; \
	         chmod +x $${tst}; \
	         echo "echo \"Created new test script: $${tst}\"" )

########################################################################
#
#  internal Rules
#
########################################################################
.PHONY: update erase installbin installman chkMan chkStatus chkDebug chkInstallDebug

ifdef SkipThis
update: 
	# Skip making MPI with no mpirun available
else
update: chkDebug chkMan ${Application} ${Library}
	@if [ "${Name}" ]; then\
            if [ "${LNDMRK}" != "" ]; then\
              LNDMRK=${LNDMRK}; export LNDMRK;\
            fi;\
            if [ "${AllSrcs}" = "" ]; then\
              echo No Srcs. Bypassing ddsexecopy;\
            else\
              echo "${ROOTBIN}/ddsexecopy $(shell if [ "${Rev}" = "" ]; then echo ${Name}; else echo ${Name}.rev${Rev}; fi)";\
              ${ROOTBIN}/ddsexecopy $(shell if [ "${Rev}" = "" ]; then echo ${Name}; else echo ${Name}.rev${Rev}; fi);\
            fi;\
         elif [ "${LibName}" ]; then\
            if [ "${LibHdrs}" ]; then\
              if [ "${PrjName}" != "" ]; then\
                if [ ! -d  ${PRODUCTROOT}/include/${PrjName} ]; then\
                  mkdir -p ${PRODUCTROOT}/include/${PrjName};\
                fi;\
                echo "cp ${LibHdrs} ${PRODUCTROOT}/include/${PrjName}";\
                cp ${LibHdrs} ${PRODUCTROOT}/include/${PrjName};\
              else \
                echo "cp ${LibHdrs} ${PRODUCTROOT}/include";\
                cp ${LibHdrs} ${PRODUCTROOT}/include;\
              fi;\
            fi;\
            if [ "${LibMods}" ]; then\
              if [ "${PrjName}" != "" ]; then\
                if [ ! -d  ${PRODUCTROOT}/include/${PrjName}/${TArchDir} ]; then\
                  mkdir -p ${PRODUCTROOT}/include/${PrjName}/${TArchDir};\
                fi;\
                echo "cp ${LibMods} ${PRODUCTROOT}/include/${PrjName}/${TArchDir}";\
                cp ${LibMods} ${PRODUCTROOT}/include/${PrjName}/${TArchDir};\
              else \
                if [ ! -d  ${PRODUCTROOT}/include/${TArchDir} ]; then\
                  mkdir -p ${PRODUCTROOT}/include/${TArchDir};\
                fi;\
               echo "cp ${LibMods} ${PRODUCTROOT}/include/${TArchDir}";\
               cp ${LibMods} ${PRODUCTROOT}/include/${TArchDir};\
              fi;\
            fi;\
            if [ "${PrjName}" != "" ]; then\
              if [ ! -d  ${PRODUCTROOT}/lib/${PrjName}/${TArchDir} ]; then\
                mkdir -p ${PRODUCTROOT}/lib/${PrjName}/${TArchDir};\
              fi;\
              echo "cp ${Library} ${PRODUCTROOT}/lib/${PrjName}/${TArchDir}";\
              rm -f ${PRODUCTROOT}/lib/${PrjName}/${TArchDir}/${Library};\
              cp ${Library} ${PRODUCTROOT}/lib/${PrjName}/${TArchDir};\
            else \
              if [ ! -d  ${PRODUCTROOT}/lib/${TArchDir} ]; then\
                echo "mkdir -p ${PRODUCTROOT}/lib/${TArchDir}" ;\
                mkdir -p ${PRODUCTROOT}/lib/${TArchDir};\
              fi;\
              echo "cp ${Library} ${PRODUCTROOT}/lib/${TArchDir}";\
              rm -f ${PRODUCTROOT}/lib/${Library};\
              cp ${Library} ${PRODUCTROOT}/lib/${Library};\
            fi;\
         fi
endif

erase: chkDebug
	@rm -f ${Application} ${Library}

installbin: bin
	@if [ "${Name}" ]; then\
	   ${ROOTBIN}/ddsbincopy ${Name};\
   fi	

installman: man chkMan 
	$(if ${Manfile}${LibName},,\
      $(error Created new template man page, man1/${Name}.1;\
              edit and remake ***))
	@if [ "${Name}" ]; then echo; ${ROOTBIN}/ddsmancopy 1 ${Name}  dist_product="${DIST_PRODUCT}";\
	else ${ROOTBIN}/ddsmancopy 3 ${LibName} dist_product="${DIST_PRODUCT}"; fi

chkStatus:
	@chk=$(if $(shell if [ -x ${DDS_DIST}/asi/bin/devcode ]; then\
                        ${DDS_DIST}/asi/bin/devcode status > /dev/null 2>&1;\
                        if [ "$$?" != "0" -a -z "${DDS_NOCHK}" ]; then echo "OUT-OF-DATE"; fi;\
                     fi),\
             $(error Module is Out-of-Date with the repository; Use "devcode"))

chkVersInstall:
	@chk=$(if $(shell if [ "${INSTALL_CHK}" != "OK" ]; then\
                        echo $(INSTALL_CHK); \
                     fi),\
             $(error $(INSTALL_CHK) - Module failed repository installation check))


chkDebug: chkCheck
	@mkdir -p ${TArchDir}; \
   if [ "${DEBUG}" -a ! -f ${TArchDir}/.debug ]; then \
      echo "*** Rebuilding objects with debug option ***"; \
      touch ${TArchDir}/.debug; \
      rm -f ${TArchDir}/*; \
   elif [ !  "${DEBUG}" -a -f ${TArchDir}/.debug ]; then \
      echo "*** Rebuilding objects without debug option ***"; \
      rm -f ${TArchDir}/.debug ${TArchDir}/*; \
   fi
	@if [ "${DDS3G}" -a ! -f ${DDSEXE}/.debug ]; then \
      echo "*** Relinking binary with debug DDS library ***"; \
      touch ${DDSEXE}/.debug; \
      rm -f ${DDSEXE}/*; \
   elif [ ! "${DDS3G}" -a -f ${DDSEXE}/.debug ]; then \
      echo "*** Relinking binary without debug DDS library ***"; \
      rm -f ${DDSEXE}/.debug ${DDSEXE}/*; \
   fi

chkCheck:
	@mkdir -p ${TArchDir}; \
   if [ "${CHECK}" -a ! -f ${TArchDir}/.check ]; then \
      echo "*** Rebuilding objects with check option ***"; \
      touch ${TArchDir}/.check; \
      rm -f ${TArchDir}/*; \
   elif [ !  "${CHECK}" -a -f ${TArchDir}/.check ]; then \
      echo "*** Rebuilding objects without check option ***"; \
      rm -f ${TArchDir}/.check ${TArchDir}/*; \
   fi

chkMan: man
	@chk=$(if $(shell if [ "${Name}" ]; then\
   ${ROOTBIN}/dds2man -chk ${Name} ${AllSrcs} > /dev/null 2>&1;\
   if [ "$$?" = "0" ]; then echo "MANPAGE-ERROR"; fi; fi),\
     $(error The manpage, "man1/${Name}.1", needs to be modified!))

chkInstallDebug: chkInstallCheck
	$(if ${DDS3G},$(error Turn off DDS3G switch before installing))
	$(if ${DEBUG},$(error Turn off DEBUG switch before installing))
	$(if ${TESTDDS},$(error Turn off TESTDDS switch before installing))

chkInstallCheck:
	$(if ${CHECK},$(error Turn off CHECK switch before installing))

${Application}: ${AllObjs}
	$(if ${AllObjs},,$(error Nothing to compile))
	${MakeTArchBinDir}
	cd ${TArchDir}; ${LINK} -o $(shell if [ "${Rev}" = "" ]; then echo ${Application}; else echo ${Application}.rev${Rev}; fi) \
           $(subst ${TArchDir}/,,${AllObjs}) \
           ${LibDirs} ${Libes}
	@if [ ${DIST_PRODUCT} = "usp" -a -f date.h ]; then \
          rm -f date.h; fi
	$(shell if [ "${Rev}" != "" ]; then echo "cd ${DDSEXE}; ln -f -s ${Name}.rev${Rev} ${Name}"; fi)

${Library}: ${AllObjs}
	$(if ${AllObjs},,$(error Nothing to compile))
	ar -rc $@ $^
	@if [ ${DIST_PRODUCT} = "usp" -a -f date.h ]; then \
          rm -f date.h; fi;


########################################################################
#
#  Compile Rules
#
########################################################################
.PHONY: ${TArchDir}/svn_version.c

${TArchDir}/svn_version.c: 
	@- rm -f $@
	@- echo '/* This file is generated automatically by the DDS Make files */' > $@
	@- echo 'const char SVN_ID[]="SId: ${Name} ${Rev} ${Date} ${User} $$";' >> $@

${TArchDir}/svn_version.o: ${TArchDir}/svn_version.c
	${MakeTArchDir}
	${CompileC} -o $@ $<

${TArchDir}/%.o: %.c
	${MakeTArchDir}
	${CompileC} -o $@ $<

${TArchDir}/%.o: %.C
	${MakeTArchDir}
	${CompileC++} -o $@ $<

${TArchDir}/%.o: %.cpp
	${MakeTArchDir}
	${CompileC++} -o $@ $<

${TArchDir}/%.o: %.c++
	${MakeTArchDir}
	${CompileC++} -o $@ $<

${TArchDir}/%.o: %.F90
	${MakeTArchDir}
	${CompileF90} -o $@ $<

${TArchDir}/%.o: %.f90
	${MakeTArchDir}
	${CompileF90} -o $@ $<

${TArchDir}/%.o: %.F
	${MakeTArchDir}
	${CompileF} -o $@ $<

${TArchDir}/%.o: %.f
	${MakeTArchDir}
	${CompileF} -o $@ $<

${TArchDir}/%.o: %.for
	${MakeTArchDir}
	${CompileF} -o $@ $<


########################################################################
#
#  Help Rules
#
########################################################################
.PHONY: help variables flags

help:
	#
	# To use the DDS make files create a Makefile defining the
	# program name & source files and include files with:
	#
	#    Name   := <program name>
	#    LibName:= <library name>
	#    FSrcs  := <list of Fortran files>
	#    CSrcs  := <list of "C" files>
	#    Libs   := <list of local libraries to include>
	#    
	#    include ${DDSROOT}/etc/MakeVariables
	#    include ${DDSROOT}/etc/MakeRules 
	#
	#
	# With these DDS Makefiles you can make the following targets:
	#
	#    > make              (build binary)
	#    > make all          (build on all hosts)
	#    > make install      (install script, man page & binary)
	#    > make installbin   (install script)
	#    > make installman   (install man page)
	#    > make allinstall   (install on all hosts)
	#    > make clean        (remove mklog*, binary & objects)
	#    > make cleantests   (remove TestLog* & testresults)
	#    > make allclean     (does clean for all hosts & cleantests)
	#    > make remove       (remove all installed files)
	#    > make bin          (create start script if needed)
	#    > make man          (create man template if needed)
	#    > make distribute   (distribute installed files to remote locations)
	#    > make flags        (print help on make flags)
	#    > make variables    (print help on variables)
	#    > make hosts        (print the remote hostnames to build on)
	#    > make tests        (run tests for the application)
	#    > make alltests     (run tests on all hosts)
	#    > make newtest      (creates a new test script under "tests")
	#
variables:
	#
	# These are some of the Make variables available for 
	# use or modification (Run "make flags" for a list  
	# of application make switches that can be turned on):
	#
	# Environment which MUST be set by user:
	#
	#    DDSROOT       := "${DDSROOT}" (DDS root path)
	#    DDS_DIST      := "${DDS_DIST}" (distribution path)
	#    DDS_TEST_DATA := "${TESTDATA}" (test data path)
	#
	# User input variables:
	#    Name     Name of application
	#    LibName  Name of library (Cannot use both Name & LibName)
	#    CSrcs    a list of .c .C .cpp .c++ files
	#    FSrcs    a list of .F .f .for .F90 .f90 files
	#    LibHdrs  a list of header files to install with LibName
	#    Libs     a list of extra Application Libraries
	#
	# Parameters used by MakeVariables and MakeRules:
	#    DDSBIN     := "${DDSBIN}" (bin subdirectory)
	#    DDSEXE     := "${DDSEXE}" (Binary location)
	#    DDSRSH     := "${DDSRSH}" (rsh command)
	#
	# Parameters set by MakeVariables:
	#    System     := "${System}" (System name)
	#    Machine    := "${Machine}" (Machine type)
	#    Vendor     := "${Vendor}" (Compiler vendor)
	#    TArchDir   := "${TArchDir}" (local object directory)
	#    TArchBinDir:= "${TArchBinDir}" (local binary directory)
	#    MPIRun     := "${MPIRun}" (Whether mpirun is available)
	#    TESTDATA   := "${TESTDATA}" (Where test data is stored)
	#
	# Available for modification before MakeRules:
	#    FC         := "${FC}" (Fortran Compilation)
	#    FLD        := "${FLD}" (Fortran Link)
	#    FCFlags    := "${FCFlags}" (Fortran compile flags)
	#    FLFlags    := "${FLFlags}" (Fortran link flags)
	#    F90C       := "${F90C}" (Fortran 90 Compilation)
	#    F90LD      := "${F90LD}" (Fortran 90 Link)
	#    F90CFlags  := "${F90CFlags}" (Fortran90 compile flags)
	#    F90LFlags  := "${F90LFlags}" (Fortran90 link flags)
	#    CC         := "${CC}" (C Compilation)
	#    CCFlags    := "${CCFlags}" (C compile flags)
	#    CLD        := "${CLD}" (C Link)
	#    CLFlags    := "${CLFlags}" (C link flags)
	#    C++C       := "${C++C}" (C++ Compilation)
	#    C++CFlags  := "${C++CFlags}" (C++ compile flags)
	#    C++LD      := "${C++LD}" (C++ Link)
	#    C++LFlags  := "${C++LFlags}" (C++ link flags)
	#    TargetFlags:= "${TargetFlags}" (various Target flags)
	#    IncludeDirs:= "${IncludeDirs}" (Include directories)
	#    LibDirs    := "${LibDirs}" (Library directories)
	#    Libes      := "${Libes}" (Link Libraries)
	#

flags:
	#
	# These are the available make flags for these Makefiles 
	# along with their current settings. Run "make variables"
	# for help on the available variables used for making.
	# (Assign non-blank value to turn on)
	#
	#   CHOST       :="${CHOST} ('C' main; default Fortran)"
	#   CFORT       :="${CFORT} ('C' calling Fortran routines)"
	#   C+HOST      :="${C+HOST} ('C++' main; default Fortran)"
	#   COMPILER    :="${COMPILER} ('Linux Fortran compiler override)"
	#   CHECK       :="${CHECK} (compile with runtime checks)"
	#   DEBUG       :="${DEBUG} (Turn on debugging)"
	#   EXTEND      :="${EXTEND} (Fortran lines beyond CC 72)"
	#   F90         :="${F90} (Use F90 instead of F77)"
	#   INLINE      :="${INLINE} (inline routines into source)"
	#   MP          :="${MP} (use OpenMP)"
	#   MPI         :="${MPI} (compile for mpi if mpirun exists)"
	#   MPIX        :="${MPIX} (compile for mpi; let the code check MPI)"
	#   O1          :="${O1} (most default to -O3)"
	#   O2          :="${O2} (most default to -O3)"
	#   WARN        :="${WARN} (Turn on compiler warnings)"
	#   FFT         :="${FFT} (Use math libraries)"
	#   MOTIF       :="${MOTIF} (include X/Motif libs)"
	#   NODDS       :="${NODDS} (do not include dds libs)"
	#   NOGOPT      :="${NOGOPT} (do not flag -g on compilation)"
	#   UNDEF       :="${UNDEF} (allow undefined variables)"
	#   NETLIB      :="${NETLIB} (Use I8 lapack and blas libs)"
	#   LNDMRK      :="${LNDMRK} (Use Landmark libs, set to R5K for R5000)"
	#   USP         :="${USP} (Use usp libs;requires DEPTROOT)"
	#   INT         :="${INT} (Use INT widgets;requires DEPTROOT)"
	#   TESTDDS     :="${TESTDDS} (use development dds libs)"
	#   HOSTG       :="${HOSTG} (include chost/fhost debug libs)"
	#   GIOG        :="${GIOG} (include gio debug lib)"
	#   DDS3G       :="${DDS3G} (include dds3 debug lib)"
	#   FFTG        :="${FFTG} (include fft debug lib)"
	#   DDS_TESTS   :="${DDS_TESTS} (tests to perform)"
	#   DDS_TEST_VER:="${DDS_TEST_VER} (code version(s) to test)"
	#   DDS_TEST_DIR:="${DDS_TEST_DIR} (directory to test in)"
	#   TSTSHELL    :="${TSTSHELL} (shell script to use for new tests)"
	#

hosts:
	@ ${ROOTBIN}/gethosts -h
