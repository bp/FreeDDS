#!/bin/sh
########################################################################
#                       B P   A M E R I C A                            #
#                       All Rights Reserved                            #
#                        COPYRIGHTED 2007                              #
########################################################################
# $Id: HostComp 308 2018-12-14 16:55:55Z user $
#
# This script runs "version" on the Sun & Linux and then parses it 
# to return the Host Compiler information.  This is taken from Joe 
# Wade's comp_vers and used by the dds gmake rules.
# 
# - Jerry Ehlers June 2005
#

if [ $# -lt 1 ]; then
   echo 
   echo 'Usage: HostComp [-a|-v|-n|-e|-d|-c|-cp|-f|-f9|-tf|-cf|-ff|-clf|-flf|-clb|-flb] \\'
   echo '       [CHECK] [LNDMRK] [EXTEND] [FFT] [MPI] [COMPILER=[ifort|efc|pgf77|pgfortran|xlf|gfortran|...]]'
   echo 'Where  -a:   return all values separated by "^"'
   echo '       -v:   compiler vendor (eg. "intel")'
   echo '       -n:   compiler version # (eg. "6" or blank)'
   echo '       -e:   compiler version extension '
   echo '             (eg. "-6" or blank)'
   echo '       -d:   compiler version subdirectory'
   echo '             (eg. "/PGI-6" or blank)'
   echo '       -c:   "C" compiler (eg. "pgcc")'
   echo '       -cp:  "C++" compiler (eg. "CC")'
   echo '       -f:   fortran compiler (eg. "pgf77")'
   echo '       -f9:  fortran 90 compiler (eg. "f90")'
   echo '       -tf:  target flags (eg. "-D_FILE_OFFSET_BITS=64")'
   echo '       -cf:  "C" compiler flags (eg. "-xtarget=ultra")'
   echo '       -ff:  fortran compiler flags (eg. "-dalign")'
   echo '       -clf: "C" link flags (eg. "-q64")'
   echo '       -flf: fortran link flags (eg. "-Vaxlib")'
   echo '       -clb: "C" libes'
   echo '       -flb: fortran libes'
   echo
   echo '       LNDMRK: Modifications for Landmark R2003 (not used for R5000)'
   echo '       EXTEND: Fortran line extension'
   echo '       FFT:    Math Libraries'
   echo '       MPI:    Use MPI Compilers'
   echo
   exit
fi

if [ -z ${DDSROOT} -o ! -d ${DDSROOT} ]; then
   echo 'ERROR(HostComp): DDSROOT not defined right!'
   exit 1
fi

arg=$1
while [ $# -gt 1 ]; do
   shift
   case $1 in
      COMPILER=*) eval $1;;
      LNDMRK)     LNDMRK=x;; 
      EXTEND)     EXTEND=x;;
      CHECK)      CHECK=x;;
      FFT)        FFT=x;;
      MPI)        MPI=x;;
      MP)         MP=x;;
   esac
done

if [ $?COMPILER ]; then
  case ${COMPILER} in
	pgi*)
	  COMP_VERSION=${COMPILER};
	  unset COMPILER;
	  eval COMPILER=pgfortran;;
  esac
fi

#
# Get system info
# (This must be the same as with dds-set-path)
#
system=`uname -s | awk '{print $1}'`
machine=`uname -m | sed 's/[/]/-/' | awk '{print $1}'`
release=`uname -r | sed 's/^[0]*//' | sed 's/[^0-9.]/ /g' | sed 's/^[0]*//'`
major=`echo ${release} | awk -F. '{print $1}'`
minor=`echo ${release} | awk -F. '{print $2}'`
release=${major}.${minor:=0}
if [ "${system}" = "Linux" -a  -f "/etc/sgi-release" -a "${machine}" = "ia64" ]; then
   release="${release}-sgi"
fi

# Special case - cross compilation via mingw on Linux for native Windows x86_64
if [ -f "$COMPILER" ] && [ `basename $COMPILER` == "x86_64-w64-mingw32-gfortran" ]; then
    system="w64-mingw32"
    machine="x86_64"
    release=`$COMPILER -dumpversion`
fi
TArchDir=${system}/${release}/${machine}

#
# Get Compiler info
#
vendor=""
vernum=""
verext=""
verdir=""
vercc="cc"
vercp="CC"
verfc="f90 -fixed"
verf9="f90"
vertf=""
vercf="-fPIC"
verff="-fPIC"
verclf=""
verflf=""
verclb=""
verflb=""

if [ "${system}" = "SunOS" ]; then
   vendor="sun"
   version=`version \`which f90\` | sed 's/^.*[:][ ]*\(.*\)/\1/' `
   if [ "$version" != "" ]; then
      case $version in
         SC*)
            vernum=`echo $version | sed 's/\([A-z]*\)[.].*/\1/'`;;
         WorkShop*)
            vernum=`echo $version | awk '{print $3}' | sed 's/\([A-z]*\)[.].*/\1/'`;;
         'Sun Fortran'*)
            vernum=`echo $version | awk '{print $4}' | sed 's/\([A-z]*\)[.].*/\1/'`;;
         Sun*)
            vernum=`echo $version | awk '{print $3}' | sed 's/\([A-z]*\)[.].*/\1/'`;;
      esac
      verdir="/${vernum}"
      verext="-SC${vernum}"
      vertf="-D${system} -D${machine} -D_FILE_OFFSET_BITS=64 -DSOLARIS"
      vercf="-DUTMPX -DNEED_GETDTABLESIZE"
      # Remove -xlibmopt which somehow can conflict with sunmath and affect errno  
      if [ ${vernum} -le 6 ]; then
        verff="-M${TArchDir}${verdir} -dalign -DCOLUMN_6_CONTINUATION"
        verff="${verff}"
      else
        verff="-M${TArchDir}${verdir} -moddir=${TArchDir}${verdir} -dalign -DCOLUMN_6_CONTINUATION"
        verff="${verff} --moddir=${TArchDir}${verdir} +moddir=${TArchDir}${verdir} +moddir"
      fi
      if [ -n "${EXTEND}" ]; then
         verff="-e ${verff}"
      fi
      verclf="-dalign"
      verflf="-dalign"
      if [ -n "${FFT}" ]; then
         vertf="-DFFTW ${vertf}"
         verclb="-lfft -lfftw3 -lfftw3f"
         verflb="-lfft -lfftw3 -lfftw3f"
      fi
   fi
elif [ "${system}" = "IRIX64" ]; then
   vendor="sgi"
   vertf="-D${system} -D${machine} -64 -DSCSL"
   vercf="-DUTMPX -xansi"
   if [ -n "${EXTEND}" ]; then
      verff="-extend_source -i4"
   else
      verff="-col72 -i4"
   fi
   if [ -n "${FFT}" ]; then
      verclb="-lfft"
      verflb="-lfft"
   fi
   if [ -n "${MP}" ]; then
      verclb="${verclb} -lscs_mp"
      verflb="${verflb} -lscs_mp"
   else
      verclb="${verclb} -lscs"
      verflb="${verflb} -lscs"
   fi
elif [ "${system}" = "w64-mingw32" ]; then
   vendor="gnu-mingw"
   MINGWBINPATH=`dirname $COMPILER`
   MINGWPATH=`dirname ${MINGWBINPATH}`
   version=`${COMPILER} -dumpversion`
   vernum=`echo $version | awk -F. '{print $1}'`
   verdir="/gnu-mingw-${version}"
   vercc="${MINGWBINPATH}/x86_64-w64-mingw32-gcc -B${MINGWPATH}/x86_64-w64-mingw32/bin"
   vercp="${MINGWBINPATH}/x86_64-w64-mingw32-g++ -B${MINGWPATH}/x86_64-w64-mingw32/bin"
   verfc="${MINGWBINPATH}/x86_64-w64-mingw32-gfortran -B${MINGWPATH}/x86_64-w64-mingw32/bin"
   verf9="${MINGWBINPATH}/x86_64-w64-mingw32-gfortran -B${MINGWPATH}/x86_64-w64-mingw32/bin"
   if [ -n "${MPI}" ]; then
      vercc="mpicc -B${MINGWPATH}/x86_64-w64-mingw32/bin"
      vercp="mpic++ -B${MINGWPATH}/x86_64-w64-mingw32/bin"
      verfc="mpif77 -B${MINGWPATH}/x86_64-w64-mingw32/bin"
      verf9="mpif90 -B${MINGWPATH}/x86_64-w64-mingw32/bin"
   fi
   if [ -n "${CHECK}" ]; then
      vercc="${vercc} -fbounds-check -Wformat"
      verfc="${verfc} -fbounds-check"
      verf9="${verf9} -fbounds-check"
   fi
   vercf="-m64 -mconsole"
   verff="-m64 -mconsole"
   INC=${DDSROOT}/include/${TArchDir}${verdir}
   verff="${vertff} -J${TArchDir}${verdir} -fcray-pointer"
   if [ -n "${EXTEND}" ]; then
      verff="${vertff} -ffixed-line-length-132 ${verff}"
   fi
   verclf="-static"
   verflf="-static"
   vertf="${vertf} -DGNU -DMINGW"
   if [ -n "${FFT}" ]; then
      vertf="-DFFTW ${vertf}"
      verclb="-lfft -lfftw3 -lfftw3f -lgfortran"
      verflb="-lfft -lfftw3 -lfftw3f"
   if [ "${FFTWPATH}" != "" ]; then
      vertf="${vercf} -I${FFTWPATH}/include"
      verclb="${verclb} -L${FFTWPATH}/lib"
      verflb="${verclb} -L${FFTWPATH}/lib"
   fi
   fi
   vertf="${vertf} -DX86_64 -D__x86_64__"
   verext=`echo "${version:+-${version}}"|sed 's/[.]/_/g'`
elif [ "${system}" = "Darwin" ]; then
   vendor="gnu"
   version=`${COMPILER} -dumpversion`
   vernum=`echo $version | awk -F. '{print $1}'`
   verdir="/gnu-${version}"
   compsuf=`echo "${COMPILER}" | sed -e 's/[a-zA-Z]*\(\-.*\)/\1/g'`
   vercc="gcc${compsuf}"
   vercp="g++${compsuf}"
   verfc="gfortran${compsuf}"
   verf9="gfortran${compsuf}"
   if [ -n "${MPI}" ]; then
      vercc="mpicc"
      vercp="mpic++"
      verfc="mpif77"
      verf9="mpif90"
   fi
   if [ -n "${CHECK}" ]; then
      vercf="${vercf} -fbounds-check -Wformat"
      verff="${verff} -fbounds-check"
      verclf="${verclf} -fbounds-check"
      verflf="${verflf} -fbounds-check"
   fi
   INC=${DDSROOT}/include/${TArchDir}${verdir}
   verff="-J${TArchDir}${verdir} -fcray-pointer ${verff}"
   if [ -n "${EXTEND}" ]; then
      verff="-ffixed-line-length-132 ${verff}"
   fi
   verclf=""
   verflf=""
   vertf="${vertf} -DGNU -DGFORTRAN -D${system} -D${machine}"
   if [ -n "${FFT}" ]; then
      vertf="-DFFTW ${vertf}"
      verclb="-lfft -lfftw3 -lfftw3f -lgfortran"
      verflb="-lfft -lfftw3 -lfftw3f"
   fi
   vertf="${vertf} -DX86_64 -D__x86_64__"
   verext=`echo "${version:+-${version}}"|sed 's/[.]/_/g'`
elif [ "${system}" = "Linux" ]; then
   if [ -z "${COMPILER}" ]; then
      COMPILER=`(which ifort 2>&1) | awk '{print $1}' | awk -F/ '{print $NF}'|sed s/which://`
   fi
   if [ -z "${COMPILER}" ]; then
      COMPILER=`(which efc 2>&1) | awk '{print $1}' | awk -F/ '{print $NF}'|sed s/which://`
   fi
   if [ -z "${COMPILER}" ]; then
      COMPILER=`(which xlf 2>&1) | awk '{print $1}' | awk -F/ '{print $NF}'|sed s/which://`
   fi
   if [ -z "${COMPILER}" ]; then
      COMPILER=`(which pgfortran 2>&1) | awk '{print $1}' | awk -F/ '{print $NF}'|sed s/which://`
   fi
   if [ -z "${COMPILER}" ]; then
      COMPILER=`(which pgf77 2>&1) | awk '{print $1}' | awk -F/ '{print $NF}'|sed s/which://`
   fi
   if [ -z "${COMPILER}" ]; then
      COMPILER=`(which gfortran 2>&1) | awk '{print $1}' | awk -F/ '{print $NF}'|sed s/which://`
   fi
   if [ -z "${COMPILER}" ]; then
      echo "ERROR (HostComp): No Linux COMPILER found!"
      exit 2
   fi

   vertf="-D${system} -D${machine}"
   if [ "${COMPILER}" = "ifort" ]; then
      vendor="intel"
      version=`(ifort -V 2>&1) | grep Version | sed 's/.*Version[ ]\([0-9.]*\)[ ].*/\1/'`
      vernum=`echo ${version}|awk -F. '{print $1}'`
      #
      # For intel we need to keep separate mpi & mkl version as well as compiler
      #
      mpiver=`mpirun -info | grep Version | awk '{print $2}'`
      if [ -x ${MKLROOT}/bin/getmklversion ]; then
        mklver=`${MKLROOT}/bin/getmklversion`
      else
        mklver="NULL"
      fi
      if [ -n "$mpiver" ]; then
         version=`echo ${version}MPI$mpiver`
      fi
      if [ -n "$mklver" -a "$mklver" != "NULL" ]; then
         version=`echo ${version}MKL$mklver`
      fi
      verdir="/Intel-${version}"

      if [ -n "${LNDMRK}" ]; then
         vercc=`which icc  |sed 's/cce/cc/'|sed s'/intel64/ia32/'`
         vercp=`which icpc |sed 's/cce/cc/'|sed s'/intel64/ia32/'`
         verfc=`which ifort|sed 's/cce/cc/'|sed s'/intel64/ia32/'`
         verf9=`which ifort|sed 's/cce/cc/'|sed s'/intel64/ia32/'`
	 vertf="${vertf} -DR2003"
      else
         if [ -n "${MPI}" ]; then 
             vercc="mpiicc"
             vercp="mpiicpc"
             verfc="mpiifort"
             verf9="mpiifort"
	 else
             vercc="icc"
             vercp="icpc"
             verfc="ifort"
             verf9="ifort"
	 fi
      fi
      if [ -n "${CHECK}" ]; then
         verff="${verff} -C"
         verflf="${verflf} -C"
      fi
      vercf="${vercf} -sox -w -DUTMPX"
      verff="${verff} -sox -w -ftz -WB -module ${TArchDir}${verdir}"
      if [ -n "${EXTEND}" ]; then
         verff="-extend-source ${verff}"
      fi
      vertf="${vertf} -DINTEL -DCompLevel${vernum}"
      verclf="${verclf} -static-intel"
      verflf="${verflf} -static-intel"
      if [ "$vercc" = "mpiicc" ]; then
        verclf="${verclf} -static_mpi"
      fi
      if [ "$verfc" = "mpiifort" ]; then
        verflf="${verflf} -static_mpi"
      fi
      INC=${DDSROOT}/include/${system}/${release}/${machine}${verdir}
      if [ "${machine}" = "i686" ]; then
         vertf="$vertf -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64"
         if [ "$vernum" = "9" ]; then
            verclb="-Bstatic -lifport -limf -lm -lguide -Bdynamic -lpthread"
            verflb="-Bstatic -lifport -limf -lm -lguide -Bdynamic -lpthread"
         fi
         if [ -f ${INC}/mkl_dfti.mod -a "${FFT}" ]; then
            vertf="-DMKL ${vertf}"
            if [ "$vernum" = "9" ]; then
               verclb="-lfft -L/hpc/intel/mkl/9.1/lib/32 -lmkl_ia32 ${verclb}"
               verflb="-lfft -L/hpc/intel/mkl/9.1/lib/32 -lmkl_ia32 ${verflb}"
            else
               MKLROOT=${MKLROOT}/lib/32
               if [ -n "${MP}" ]; then
                  MKLLINK="-Wl,--start-group $MKLROOT/libmkl_intel.a $MKLROOT/libmkl_intel_thread.a $MKLROOT/libmkl_core.a -Wl,--end-group"
               else
                  MKLLINK="-Wl,--start-group $MKLROOT/libmkl_intel.a $MKLROOT/libmkl_sequential.a $MKLROOT/libmkl_core.a -Wl,--end-group"
               fi 
               verclb="-lfft ${MKLLINK} ${verclb}"
               verflb="-lfft ${MKLLINK} ${verflb}"
            fi
         elif [ -n "${FFT}" ]; then
            if [ -f "${MKLROOT}/include/mkl_dfti.f90" ]; then
               echo "ERROR (HostComp): need to make mkl_dfti module"
               echo "************************************************************"
               echo "run: cd ${INC};ifort -c ${MKLROOT}/include/mkl_dfti.f90"
               echo "     to create mkl_dfti module for fft libraries"
               echo "************************************************************"
            fi
            vertf="-DFFTW ${vertf}"
            verclb="-lfft -lfftw3 -lfftw3f ${verclb}"
            verflb="-lfft -lfftw3 -lfftw3f ${verflb}"
         fi
         if [ -n "${LNDMRK}" ]; then
            vercp="g++"
            verff="${verff} -fcray-pointer"
            verclf=""
            verflf=""
            verclb="-L`(which ifort 2>&1) | sed 's[bin/ifort[lib['` ${verclb} -lirc"
            verflb="-L`(which ifort 2>&1) | sed 's[bin/ifort[lib['` ${verflb} -lirc"
         fi
      elif [ "${machine}" = "ia64" ]; then
         if [ -f "/etc/sgi-release" ]; then
            vertf="$vertf -DIA64 -DSGI_IA64 -D__ia64__"
         else
            vertf="$vertf -DIA64 -D__ia64__"
         fi
         if [ "$vernum" = "9" ]; then
            verclb="-limf -lguide -lm -Bdynamic -lpthread -lc"
            verflb="-limf -lguide -lm -Bdynamic -lpthread -lc"
         fi
         if [ -f ${INC}/mkl_dfti.mod -a "${FFT}" ]; then
            vertf="-DMKLI8 -DMKL_INT=size_t ${vertf}"
            if [ "$vernum" = "9" ]; then
               verclb="-lfft -L/hpc/intel/mkl/9.1/lib_ilp64/64 -lmkl_ipf ${verclb}"
               verflb="-lfft -L/hpc/intel/mkl/9.1/lib_ilp64/64 -lmkl_ipf ${verflb}"
            else
               MKLROOT=${MKLROOT}/lib/64
               if [ -n "${MP}" ]; then
                  MKLLINK="-Wl,--start-group $MKLROOT/libmkl_intel_ilp64.a $MKLROOT/libmkl_intel_thread.a $MKLROOT/libmkl_core.a -Wl,--end-group"
               else
                  MKLLINK="-Wl,--start-group $MKLROOT/libmkl_intel_ilp64.a $MKLROOT/libmkl_sequential.a $MKLROOT/libmkl_core.a -Wl,--end-group"
               fi 
               verclb="-lfft ${MKLLINK} ${verclb}"
               verflb="-lfft ${MKLLINK} ${verflb}"
            fi
         elif [ -n "${FFT}" ]; then
            if [ -f "${MKLROOT}/include/mkl_dfti.f90" ]; then
               echo "ERROR (HostComp): need to make mkl_dfti module"
               echo "************************************************************"
               echo "run: cd ${INC}; ifort -c -i8 ${MKLROOT}/include/mkl_dfti.f90"
               echo "     to create mkl_dfti module for fft libraries"
               echo "************************************************************"
            fi
            vertf="-DFFTW ${vertf}"
            verclb="-lfft -lfftw3 -lfftw3f ${verclb}"
            verflb="-lfft -lfftw3 -lfftw3f ${verflb}"
         fi
      elif [ "${machine}" = "x86_64" ]; then
         if [ -n "${LNDMRK}" ]; then
            vertf="$vertf -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64"
         else
            vertf="$vertf -DX86_64 -D__x86_64__"
            if [ "${vernum}" = "9" ]; then
               verclb="-limf -lguide -lm -lpthread -lc"
               verflb="-limf -lguide -lm -lpthread -lc"
            fi
            if [ -n "${MPI}" ]; then
               vercf="${vercf} -I${I_MPI_ROOT}/include64"
               verff="${verff} -I${I_MPI_ROOT}/include64"
            fi
            if [ -f ${MKLROOT}/include/intel64/ilp64/mkl_dfti.mod -a "${FFT}" ]; then
               vertf="-DMKLI8 -DMKL_INT=size_t ${vertf}"
	       vercf="${vercf} -I${MKLROOT}/include"
	       verff="${verff} -I${MKLROOT}/include/intel64/ilp64"
               if [ "$vernum" = "9" ]; then
                  verclb="-lfft -L/hpc/intel/mkl/9.1/lib_ilp64/em64t -lmkl_em64t ${verclb}"
                  verflb="-lfft -L/hpc/intel/mkl/9.1/lib_ilp64/em64t -lmkl_em64t ${verflb}"
               else
                  MKLROOT=${MKLROOT}/lib/intel64
                  if [ -n "${MP}" ]; then
                     MKLLINK="-Wl,--start-group $MKLROOT/libmkl_blas95_ilp64.a $MKLROOT/libmkl_lapack95_ilp64.a $MKLROOT/libmkl_intel_ilp64.a $MKLROOT/libmkl_core.a $MKLROOT/libmkl_intel_thread.a -Wl,--end-group"
                  else
                     MKLLINK="-Wl,--start-group $MKLROOT/libmkl_intel_ilp64.a $MKLROOT/libmkl_sequential.a $MKLROOT/libmkl_core.a -Wl,--end-group"
                  fi 
                  verclb="-lfft ${MKLLINK} ${verclb}"
                  verflb="-lfft ${MKLLINK} ${verflb}"
               fi
            elif [ -n "${FFT}" ]; then
               if [ -f "${MKLROOT}/include/mkl_dfti.f90" -a -z "${LNDMRK}" ]; then
                  echo "ERROR (HostComp): need to make mkl_dfti module"
                  echo "************************************************************"
                  echo "run: cd ${INC}; ifort -c -i8 ${MKLROOT}/include/mkl_dfti.f90"
                  echo "     to create mkl_dfti module for fft libraries"
                  echo "************************************************************"
               fi
               vertf="-DFFTW ${vertf}"
               verclb="-lfft -lfftw3 -lfftw3f ${verclb}"
               verflb="-lfft -lfftw3 -lfftw3f ${verflb}"
            fi
         fi
      fi
      vercf="${vercf} -axCORE-AVX-I,CORE-AVX2,CORE-AVX512,MIC-AVX512"
      verff="${verff} -axCORE-AVX-I,CORE-AVX2,CORE-AVX512,MIC-AVX512"
   elif [ "${COMPILER}" = "efc" ]; then
      vendor="intel"
      version=`(efc -V 2>&1) | grep Version | sed 's/.*Version[ ]\([0-9]*[.][0-9]\).*/\1/'`
      vernum=`echo ${version} | awk -F. '{print $1}'`
      verdir="/Intel-${vernum}"
      vercc="ecc"
      vercp="ecc"
      verfc="efc"
      verf9="efc"
      vercf="-w -ftz -DUTMPX"
      verff="-w -w90 -w95 -ftz -WB"
      if [ -n "${EXTEND}" ]; then
         verff="-extend-source ${verff}"
      fi
      vertf="${vertf} -DINTEL -DCompLevel${vernum}"
      verclf=""
      verflf="-Vaxlib"
      verclb="-lPEPCF90 -lCEPCF90 -lF90 -lintrins -ldl -lguide -lm -Bdynamic -lpthread"
      verflb="-lPEPCF90 -lCEPCF90 -lF90 -ldl -lguide -lm -Bdynamic -lpthread"
      INC=${DDSROOT}/include/${TArchDir}${verdir}
      if [ "${machine}" = "ia64" ]; then
         if [ -f "/etc/sgi-release" ]; then
            vertf="${vertf} -DIA64 -D__ia64__ -DSGI_IA64 -DSCSL"
            verclb="-Bdynamic -lscs_mp ${verclb}"
            verflb="-Bdynamic -lscs_mp ${verflb}"
         else
            vertf="${vertf} -DIA64 -D__ia64__ -DIA64 -DFFTW "
            verclb="-lfft -lfftw3 -lfftw3f ${verclb}"
            verflb="-lfft -lfftw3 -lfftw3f ${verflb}"
         fi
      elif [ "${machine}" = "i686" ]; then
         vertf="$vertf -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64 -DFFTW"
         verclb="-lfft -lfftw3 -lfftw3f ${verclb}"
         verflb="-lfft -lfftw3 -lfftw3f ${verflb}"
      elif [ "${machine}" = "x86_64" ]; then
         vertf="$vertf -DX86_64 -D__x86_64__ -DFFTW"
         verclb="-lfft -lfftw3 -lfftw3f ${verclb}"
         verflb="-lfft -lfftw3 -lfftw3f ${verflb}"
      fi
   elif [ "${COMPILER}" = "xlf" ]; then
      vendor="ibm"
      version=`(xlf -qversion 2>&1) | grep Linux | sed 's/.*\([0-1][0-9][.][0-9]\).*/\1/'`
      vernum=`echo ${version} | awk -F. '{print $1}'`
      verdir="/Ibm-${vernum}"
      vercc="xlc_r"
      vercp="xlc++_r"
      verfc="xlf_r"
      verf9="xlf2008_r"
      verff="-D${system} -Dppc64 -D${machine} -D__FORTRAN__ -fcray-pointer"
      verff="${verff} -qmoddir=${TArchDir}${verdir} "
      verff="${verff} -I${TArchDir}${verdir}"
      vertf=""
      vercf="-D${system} -D${machine}"
      if [ -n "${MPI}" ]; then
         pth="${MPI_ROOT}"
         vercc="${pth}/bin/mpicc"
         vercp="${pth}/bin/mpic++"
         verfc="${pth}/bin/mpifort"
         verf9="export OMPI_FC=${verf9}; mpifort "
         verclb="-L${pth}/lib"
#        verflb="-Bstatic -L${pth}/lib"
         verflb="-L${pth}/lib"
         verff="${verff} -DMPI -qextname"
        if  [ -n "${EXTEND}" ]; then
           verff="-qfixed=132 ${verff}"
        fi
      else
#--- -qextname so chost.h can define HOST_FTN_FUNC the same
#--- -qintlog is used to allow statment comparing logical expression without having to use .neqv. or .eqv.
#--- -qxflag=strict_argnum is needed so that the IBM compiler do not generate extra NULL padding
#--- in variable arguments between Fortran and C.  This is very unsafe and not guaranteed to
#--- work in the future
# The -Dppc64 option creates problem for xlf? Don't remember, so I'll try it again.
# Need -Dppc64 for fft routines
#       verff="-WF,-D${system} -WF,-Dppc64 -WF,-D${machine} -WF,-D__FORTRAN__ -qextname -qsuppress=1513-029 -qnosave -qintlog -qxflag=strict_argnum"
        verff="${verff} -qextname"
      fi
      if [ -n "${EXTEND}" ]; then
         verff="-qfixed=132 ${verff}"
      fi
#      verclf="-q64 -qarch=auto -qmaxmem=8192"
#      verflf="-q64 -qarch=auto -qmaxmem=8192"
      if [ -n "${FFT}" ]; then
         verclb="${verclb} -L/opt/ibmcmp/xlsmp/default/lib64 -L/opt/ibmcmp/xlf/default/lib64"
         verclb="${verclb} -R/opt/ibmcmp/lib64 -lfft -lfftw3 -lesslsmp6464 -lxlsmp "
         verflb="-L`(which ${verfc} 2>&1) | sed 's[bin/[lib['` ${verflb} -lxlf90_r -lxlfmath"
         verflb="${verflb} -lfft -lfftw3 -lfftw3f -lesslsmp6464"
      fi
  elif [ "${COMPILER}" = "pgf77" -o "${COMPILER}" = "pgfortran" ]; then
      vendor="pgi"
      version=`(${COMPILER} -V 2>&1) | grep '^'${COMPILER}' '`
      version=`echo $version | awk '{print $2}' | awk -F- '{print $1}'`
      vernum=`echo $version | awk -F. '{print $1}'`
      verdir="/PGI-${vernum}"
      vercf=""
      verff=""
      if [ -n "${MPI}" ]; then 
         vercc="mpicc"
         vercp="mpiCC"
         verfc="mpif77"
         verf9="mpif90"
      else
         vercc="pgcc"
         vercp="pgCC"
         if [ ${vernum} -ge 11 ]; then
           verfc="pgfortran"
           verf9="pgfortran"
         else
           verfc="pgf77"
           verf9="pgf90"
         fi
      fi
      if [ -n "${CHECK}" ]; then
         vercf="-Mbounds"
         verff="-C"
         verflf="${verflf} -C"
      fi
      verclf="-Bstatic_pgi"
      verflf="${verflf} -Bstatic_pgi -pgf90libs"
      vertf="${vertf} -DPGI"
      verclb="-lpgftnrtl -lrt"
      verflb="-lpgftnrtl -lrt"
      if [ -n "${FFT}" ]; then
         vertf="-DFFTW ${vertf}"
         verclb="-lfft -lfftw3 -lfftw3f ${verclb}"
         verflb="-lfft -lfftw3 -lfftw3f ${verflb}"
      fi
      if [ "${machine}" = "i686" ]; then
         vertf="${vertf} -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64"
         verff="${verff} -Mnodalign -Mbyteswapio"
      elif [ "${machine}" = "ia64" ]; then
         vertf="${vertf} -DIA64 -D__ia64__"
         verff="${verff} -Mnodalign -Mbyteswapio -Mvarargs"
      else
         vertf="${vertf} -DX86_64 -D__x86_64__"
         verff="${verff} -Mnodalign -Mbyteswapio -Mvarargs"
      fi
      if [ -n "${EXTEND}" ]; then
         verff="-Mextend ${verff}"
      fi
   elif [ "${COMPILER}" = "gfortran" ]; then
      vendor="gnu"
      version=`(gfortran -v 2>&1) | grep ' version ' | awk '{print $3}'`
      vernum=`echo $version | awk -F. '{print $1}'`
      verdir="/gnu-${version}"
      vercc="gcc"
      vercp="g++"
      verfc="gfortran"
      verf9="gfortran"
      if [ -n "${MPI}" ]; then
         vercc="mpicc"
         vercp="mpic++"
         verfc="mpif77"
         verf9="mpif90"
      fi
      if [ -n "${CHECK}" ]; then
         vercf="${vercf} -fbounds-check -Wformat"
         verff="${verff} -fbounds-check"
         verclf="${verclf} -fbounds-check"
         verflf="${verflf} -fbounds-check"
      fi
      INC=${DDSROOT}/include/${TArchDir}${verdir}
      verff="-J${TArchDir}${verdir} -fcray-pointer ${verff}"
      if [ -n "${EXTEND}" ]; then
         verff="-ffixed-line-length-132 ${verff}"
      fi
      verclf=""
      verflf=""
      vertf="${vertf} -DGNU -DGFORTRAN"
      if [ -n "${FFT}" ]; then
         vertf="-DFFTW ${vertf}"
         verclb="-lfft -lfftw3 -lfftw3f -lgfortran"
         verflb="-lfft -lfftw3 -lfftw3f"
      fi
      if [ "${machine}" = "i686" ]; then
         vertf="${vertf} -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64"
      elif [ "${machine}" = "ia64" ]; then
         vertf="${vertf} -DIA64 -D__ia64__"
      elif [ "${machine}" = "x86_64" ]; then
         vertf="${vertf} -DX86_64 -D__x86_64__"
      fi
   else
      echo "ERROR(HostComp) Linux COMPILER=${COMPILER} not found!"
      exit 3
   fi
   verext=`echo "${version:+-${version}}"|sed 's/[.]/_/g'`
elif [ "${system}" = "HP-UX" ]; then
   vendor="hp"
   vercp="cc"
   verfc="f90"
   verf9="f90"
   vertf="-D${system} -D${machine} +DD64 +DSitanium"
   vercf=""
   verff="+U77"
   if [ "${EXTEND}" ]; then
      verff="+extend_source ${verff}"
   fi
   verflf="+U77"
   if [ -n "${FFT}" ]; then
      vertf="-DFFTW ${vertf}"
      verclb="-lfft -lfftw3 -lfftw3f -lgfortran"
      verflb="-lfft -lfftw3 -lfftw3f"
   fi
else
   echo "ERROR (HostComp): *** Unknown System type (${system}) ***" 1>2
fi


if [ "$arg" = "-a" ]; then
   echo "${vendor}^${vernum}^${verext}^${verdir}^${vercc}^${vercp}^${verfc}^${verf9}^${vertf}^${vercf}^${verff}^${verclf}^${verflf}^${verclb}^${verflb}"
elif [ "$arg" = "-v"   ]; then
   echo $vendor
elif [ "$arg" = "-n"   ]; then
   echo $vernum
elif [ "$arg" = "-e"   ]; then
   echo $verext
elif [ "$arg" = "-d"   ]; then
   echo $verdir
elif [ "$arg" = "-c"   ]; then
   echo $vercc
elif [ "$arg" = "-cp"  ]; then
   echo $vercp
elif [ "$arg" = "-f"   ]; then
   echo $verfc
elif [ "$arg" = "-f9"  ]; then
   echo $verf9
elif [ "$arg" = "-tf"  ]; then
   echo $vertf
elif [ "$arg" = "-cf"  ]; then
   echo $vercf
elif [ "$arg" = "-ff"  ]; then
   echo $verff
elif [ "$arg" = "-clf" ]; then
   echo $verclf
elif [ "$arg" = "-flf" ]; then
   echo $verflf
elif [ "$arg" = "-clb" ]; then
   echo $verclb
elif [ "$arg" = "-flb" ]; then
   echo $verflb
else
   echo "ERROR(HostComp)"
fi
