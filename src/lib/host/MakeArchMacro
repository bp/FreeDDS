########################################################################
#                      copyright 2008, BP America                      #
#                          All Rights Reserved                         #
########################################################################
# $Id: MakeArchMacro 302 2016-06-13 21:26:58Z user $

### See $(DDSROOT)/README.makeexamples for more information,
# Macro definitions in "MakeArchMacro" are used by "make"
# only when executing in the $(TARCH) directory.

### Setup Debug libraries with DEBUG=x being defined
#   DBGEXT is used to tack on "g" on debug libraries and working directories
#   Two generic optimization levels are supported.
#      OPTIMIZE    optimized version
#      DEBUG       generate debug version

ifdef debug
   DBGEXT= g
   CFLAGS= $(DEBUG.c)
   FFLAGS= $(DEBUG.f)
else
   DBGEXT= 
   CFLAGS= $(OPTIMIZE.c) 
   FFLAGS= $(OPTIMIZE.F)
endif

### VERBOSE is used for displaying verbose makefile information
#       (should be either ":" (nop) or "echo DEBUG_ARCH:")
VERBOSE=$(if $(verbose),echo DEBUG_ARCH):

### Compile and load commands and flags.
### These macros extend $(CC) and $(FC) functionality.
### $(COMPILE.c) is used to compile C, supplanting "$(CC) -c".
### $(LINK.c) compiles and links C, supplanting "$(CC)".
### Macros suffixed with ".f" and ".F" support Fortran and
### preprocessed Fortran.

COMPILE.c= $(CC) $(TARCHFLAGS.c) -c

LINK.c= $(CLD) $(TARCHFLAGS.c) $(LINKMODE) $(SYSLIBS.c)

COMPILE.f= $(FC) $(TARCHFLAGS.f) -c

LINK.f= $(FLD) $(TARCHFLAGS.f) $(LINKMODE) $(SYSLIBS.f)

COMPILE.F= $(FC) $(TARCHFLAGS.F) -c

LINK.F= $(FLD) $(TARCHFLAGS.F) $(LINKMODE) $(SYSLIBS.f)

LOAD= $(LD) $(TARCHFLAGS) $(LINKMODE)

### FLAGS are used in conjunction with COMPILE and LINK macros.
### Example: $(COMPILE.c) $(CFLAGS) $(CPPFLAGS) xxx.c
### Example: $(LINK.c) $(CFLAGS) $(CPPFLAGS) xxx.c yyy.o $(LIBS)

### CPPFLAGS specifies preprocessor flags (C and Fortran).
###    Example: "CPPFLAGS= -I. -I.. $(I.gio)  $(I.chost)"
### Note: F77 compilers seem to ignore "-I" compiler directives,
###    when processing "include 'xxx.h'" directives (.f suffix).
###    They simply look for the include files in the current directory
###    and the directory where the source is found.
###    This makes standard F77 support (.f suffix) inferior to
###    C preprocessor support (.F suffix) and #include "xxx.h".
CPPFLAGS= -I. -I.. 

### LIBS traditionally specifies object libraries for linking.
### The required libraries are dependent upon the application.
### Example: LIBS= $(.dds) $(.chost) $(SYSLIBS)
LIBS= $(SYSLIBS)

### C compiler.
### Provide defaults for local work with CompLevel
CC= $(CC-$(TARCH))
   CC-$(TARCH)=       $(CompC)
ifdef REMOTE
   CC-LX24i686-6=     /opt/pgi/linux86/6.2/bin/pgcc 
   CC-LX24i686-9=     /opt/intel/compiler91/i686/bin/icc
   CC-LX26i686-10=    /hpc/soft/intel/x86_64/ict-3.1.1/cc/10.1.015/bin/icc
   CC-LX26i686-11=    /hpc/soft/intel/x86_64/ict-3.2.1.015/Compiler/11.1/038/bin/ia32/icc
   CC-LX26i686-11_1MPI3_2_1_009= /hpc/soft/intel/x86_64/ict-3.2.1.015/Compiler/11.1/038/bin/ia32/icc
   CC-LX26i686-11_1MPI4_0_0_028MKL10_2_5_035= /hpc/soft/intel/x86_64/ict-3.2.1.015/Compiler/11.1/038/bin/ia32/icc
   CC-LX26x86_64-10=  /hpc/soft/intel/x86_64/ict-3.1.1/cce/10.1.015/bin/icc
   CC-LX26x86_64-11=  /hpc/soft/intel/x86_64/ict-3.2.1.015/Compiler/11.1/038/bin/intel64/icc
   CC-LX26x86_64-11_1MPI3_2_1_009=  /hpc/soft/intel/x86_64/ict-3.2.1.015/Compiler/11.1/038/bin/intel64/icc
   CC-LX26x86_64-11_1MPI4_0_0_028MKL10_2_5_035= /hpc/soft/intel/x86_64/ict-4.0.0.020/Compiler/11.1/072/bin/intel64/icc
   CC-LX26x86_64-4_1_2= gcc
   CC-LX26x86_64-4_3_2= gcc
   CC-LX26sgiia64-10= /hpc/soft/intel/ia64/ict-3.1.1/cc/10.1.015/bin/icc
#  CC-LX26sgiia64-11_1= /hpc/soft/intel/ia64/ict-3.2.1.015/Compiler/11.1/038/bin/ia64/icc
endif

### Fortran compiler.
### Provide defaults for local work with CompLevel
FC= $(FC-$(TARCH)) -I.
   FC-$(TARCH)=       $(CompF)
ifdef REMOTE
   FC-LX24i686-6=     /opt/pgi/linux86/6.2/bin/pgf77
   FC-LX24i686-9=     /opt/intel/compiler91/i686/bin/ifort
   FC-LX26i686-10=    /hpc/soft/intel/x86_64/ict-3.1.1/fc/10.1.015/bin/ifort
   FC-LX26i686-11=    /hpc/soft/intel/x86_64/ict-3.2.1.015/Compiler/11.1/038/bin/ia32/ifort
   FC-LX26i686-11_1MPI3_2_1_009= /hpc/soft/intel/x86_64/ict-3.2.1.015/Compiler/11.1/038/bin/ia32/ifort
   FC-LX26i686-11_1MPI4_0_0_028MKL10_2_5_035= /hpc/soft/intel/x86_64/ict-4.0.0.020/Compiler/11.1/072/bin/ia32/ifort
   FC-LX26x86_64-10=  /hpc/soft/intel/x86_64/ict-3.1.1/fce/10.1.015/bin/ifort
   FC-LX26x86_64-11=  /hpc/soft/intel/x86_64/ict-3.2.1.015/Compiler/11.1/038/bin/intel64/ifort
   FC-LX26x86_64-11_1MPI3_2_1_009= /hpc/soft/intel/x86_64/ict-3.2.1.015/Compiler/11.1/038/bin/intel64/ifort
   FC-LX26x86_64-11_1MPI4_0_0_028MKL10_2_5_035= /hpc/soft/intel/x86_64/ict-4.0.0.020/Compiler/11.1/072/bin/intel64/ifort
   FC-LX26x86_64-4_1_2= gfortran
   FC-LX26x86_64-4_3_2= gfortran
   FC-LX26sgiia64-10= /hpc/soft/intel/ia64/ict-3.1.1/fc/10.1.015/bin/ifort
#  FC-LX26sgiia64-11_1= /hpc/soft/intel/ia64/ict-3.2.1.015/Compiler/11.1/038/bin/ia64/ifort
endif

### Turn off MPI for remote i686 libraries
RMTMPI= $(RMTMPI-$(TARCH))
   RMTMPI-$(TARCH)=$(DMPI)
ifdef REMOTE
   RMTMPI-LX26i686-11_1MPI4_0_0_028MKL10_2_5_035=
endif
DMPI:=$(RMTMPI)

### Language specific loader.
CLD=   $(CC)
FLD=   $(FC)
LD=    $(CC)

### Target architecture selection flags
###

FFTTYPE= $(shell if [ -f "$(MKLROOT)/include/intel64/ilp64/mkl_dfti.mod" ]; then \
                    echo "-DMKL"; \
                 elif [ -f "$(MKLROOT)/include/intel64/ilp64/MKL_DFTI.mod" ]; then \
                    echo "-DMKL"; \
                 else echo "-DFFTW"; fi)

TARCHFLAGS.c= $(TARCHFLAGS.c-$(TARCH))
   TARCHFLAGS.c-$(TARCH)= $(CompCF) 
ifdef REMOTE
   TARCHFLAGS.c-IRIX32-IP27=     -DIRIX32 -32 -xansi -DSCSL
   TARCHFLAGS.c-IRIX32-IP27-n32= -DIRIX32 -n32 -xansi -DSCSL
   TARCHFLAGS.c-IRIX64-IP27=     -DIRIX64 -64 -xansi -DSCSL
   TARCHFLAGS.c-LX24i686-6=      -DLINUX -DPGI -DFFTW -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64 -B
   TARCHFLAGS.c-LX26i686-10=     -DLINUX -DINTEL -DMKL -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64 
   TARCHFLAGS.c-LX26i686-11=     -DLINUX -DINTEL -DMKL -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64 
   TARCHFLAGS.c-LX26i686-11_1MPI3_2_1_009= -DLINUX -DINTEL -DMKL -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64 
   TARCHFLAGS.c-LX26i686-11_1MPI4_0_0_028MKL10_2_5_035= -DLINUX -DINTEL -DMKL -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64 
   TARCHFLAGS.c-LX26x86_64-4_1_2=-DFFTW -DLinux -Dx86_64 -DGNU -DX86_64 -D__x86_64__
   TARCHFLAGS.c-LX26x86_64-4_3_2=-DFFTW -DLinux -Dx86_64 -DGNU -DX86_64 -D__x86_64__
endif

TARCHFLAGS.f= $(TARCHFLAGS.f-$(TARCH))
   TARCHFLAGS.f-$(TARCH)= $(CompFF)
ifdef REMOTE
   TARCHFLAGS.f-IRIX32-IP27=     -DIRIX32 -32 -col72 -DSCSL
   TARCHFLAGS.f-IRIX32-IP27-n32= -DIRIX32 -n32 -col72 -DSCSL
   TARCHFLAGS.f-IRIX64-IP27=     -DIRIX64 -64 -col72 -i4 -DSCSL
   TARCHFLAGS.f-LX24i686-6=      -DLINUX -DPGI -DFFTW -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64 -Mnodalign -Mbyteswapio
   TARCHFLAGS.f-LX26i686-10=     -DLINUX -DINTEL -DMKL -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64 
   TARCHFLAGS.f-LX26i686-11=     -DLINUX -DINTEL -DMKL -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64 
   TARCHFLAGS.f-LX26i686-11_1MPI3_2_1_009= -DLINUX -DINTEL -DMKL -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64 
   TARCHFLAGS.f-LX26i686-11_1MPI4_0_0_028MKL10_2_5_035= -DLINUX -DINTEL -DMKL -DIA32 -D__i686__ -D_FILE_OFFSET_BITS=64 
   TARCHFLAGS.f-LX26x86_64-4_1_2=-DFFTW -DLinux -Dx86_64 -DGNU -DX86_64 -D__x86_64__ -fcray-pointer 
   TARCHFLAGS.f-LX26x86_64-4_3_2=-DFFTW -DLinux -Dx86_64 -DGNU -DX86_64 -D__x86_64__ -fcray-pointer 
endif

TARCHFLAGS.F= $(TARCHFLAGS.f) 

### Load flags
TARCHFLAGS= $(TARCHFLAGS-$(TARCH))
ifdef REMOTE
   TARCHFLAGS-IRIX32-IP27=     -32
   TARCHFLAGS-IRIX32-IP27-n32= -n32
   TARCHFLAGS-IRIX64-IP27=     -64
endif

###
### Make the architecture directories
###
UARCH= $(UARCH-$(TARCH))
   UARCH-$(TARCH)= $(ArchBin)$(CompDir)
ifdef REMOTE
   UARCH-IRIX32-IP27=    IRIX/6.5/IP27
   UARCH-IRIX32-IP27-n32=IRIX/6.5/IP27/n32
   UARCH-IRIX64-IP27=    IRIX64/6.5/IP27
   UARCH-LX24i686-6=     Linux/2.4/i686/PGI-6
   UARCH-LX24i686-9=     Linux/2.4/i686/Intel-9
   UARCH-LX26i686-10=    Linux/2.6/i686/Intel-10
   UARCH-LX26i686-11=    Linux/2.6/i686/Intel-11
   UARCH-LX26i686-11_1MPI3_2_1_009= Linux/2.6/i686/Intel-11.1MPI3.2.1.009
   UARCH-LX26i686-11_1MPI4_0_0_028MKL10_2_5_035= Linux/2.6/i686/Intel-11.1MPI4.0.0.028MKL10.2.5.035
   UARCH-LX26x86_64-10=  Linux/2.6/x86_64/Intel-10
#  UARCH-LX26x86_64-11=  Linux/2.6/x86_64/Intel-11
   UARCH-LX26x86_64-11_1MPI3_2_1_009= Linux/2.6/x86_64/Intel-11.1MPI3.2.1.009
   UARCH-LX26x86_64-11_1MPI4_0_0_028MKL10_2_5_035= Linux/2.6/x86_64/Intel-11.1MPI4.0.0.028MKL10.2.5.035
   UARCH-LX26x86_64-4_1_2= Linux/2.6/x86_64/gnu-4.1.2
   UARCH-LX26x86_64-4_3_2= Linux/2.6/x86_64/gnu-4.3.2
   UARCH-LX26sgiia64-10= Linux/2.6-sgi/ia64/Intel-10
#  UARCH-LX26sgiia64-11= Linux/2.6-sgi/ia64/Intel-11
endif

###
### Landmark flag to build i686 on x86_64
###
MPICFlags= $(MPICFlags-$(TARCH))
   MPICFlags-$(TARCH)= $(MPIcflags)
ifdef REMOTE
   MPICFlags-LX26i686-10=   -I/hpc/soft/intel/x86_64/ict-3.1.1/impi/3.1/include
   MPICFlags-LX26i686-11=   -I/hpc/soft/intel/x86_64/ict-3.2.1.015/impi/3.2.1.009/include
   MPICFlags-LX26i686-11_1MPI3_2_1_009= -I/hpc/soft/intel/x86_64/ict-3.2.1.015/impi/3.2.1.009/include
   MPICFlags-LX26i686-11_1MPI4_0_0_028MKL10_2_5_035= -I/hpc/soft/intel/x86_64/ict-4.0.0.020/impi/4.0.0.028/include
   MPICFlags-LX26x86_64-10= -I/hpc/soft/intel/x86_64/ict-3.1.1/impi/3.1/include64
   MPICFlags-LX26x86_64-11= -I/hpc/soft/intel/x86_64/ict-3.2.1.015/impi/3.2.1.009/include64
   MPICFlags-LX26x86_64-11_1MPI3_2_1_009= -I/hpc/soft/intel/x86_64/ict-3.2.1.015/impi/3.2.1.009/include64
   MPICFlags-LX26x86_64-11_1MPI4_0_0_028MKL10_2_5_035= -I/hpc/soft/intel/x86_64/ict-4.0.0.020/impi/4.0.0.028/include64
   MPICFlags-LX26x86_64-4_1_2= -I/hpc/soft/intel/x86_64/ict-4.0.0.020/impi/4.0.0.028/include64
   MPICFlags-LX26x86_64-4_3_2= -I/hpc/soft/intel/x86_64/ict-4.0.0.020/impi/4.0.0.028/include64
   MPICFlags-LX26sgiia64-10=-I/hpc/soft/intel/ia64/ict-3.1.1/impi/3.1/include64
   MPICFlags-LX26sgiia64-11_1=-I/hpc/soft/intel/ia64/ict-3.2.1.015/impi/3.2.1.009/include64
endif

###
### FFT flags to build fft interface
###
FFFTFlags = $(FFFTFlags-$(TARCH))
   FFFTFlags-$(TARCH)=$(shell ${DDSROOT}/src/lib/host/HostComp -ff FFT)

FFTFlags= $(FFTFlags-$(TARCH))
   FFTFlags-$(TARCH)=$(shell ${DDSROOT}/src/lib/host/HostComp -tf FFT)
ifdef REMOTE
   FFTFlags-LX26i686-10= 
   FFTFlags-LX26i686-11= 
   FFTFlags-LX26i686-11_1MPI3_2_1_009=
   FFTFlags-LX26i686-11_1MPI4_0_0_028MKL10_2_5_035=
   FFTFlags-LX26x86_64-4_1_2= -DFFTW -DLinux -Dx86_64 -DGNU -DX86_64 -D__x86_64__
   FFTFlags-LX26x86_64-4_3_2= -DFFTW -DLinux -Dx86_64 -DGNU -DX86_64 -D__x86_64__
endif

###
### optimization flags
###
OPTIMIZE.c= $(OPTIMIZE.c-$(TARCH))
   OPTIMIZE.c-$(TARCH)=       -O2
   OPTIMIZE.c-sun4u5_8-SC6=   -xO4
ifdef REMOTE
   OPTIMIZE.c-IRIX32-IP27-n32=-O3 -OPT:Olimit=0
   OPTIMIZE.c-IRIX64-IP27=    -O3 -OPT:Olimit=0
   OPTIMIZE.c-LX26x86_64-6=   -fast
endif

OPTIMIZE.f= $(OPTIMIZE.f-$(TARCH))
   OPTIMIZE.f-$(TARCH)=       -O2
ifdef REMOTE
   OPTIMIZE.f-sun4u5_8-SC6=   -O4
   OPTIMIZE.f-IRIX32-IP27-n32=-O3
   OPTIMIZE.f-IRIX64-IP27=    -O3
   OPTIMIZE.f-LX26x86_64-6=   -fast
endif

OPTIMIZE.F= $(OPTIMIZE.f)

### Debug (no optimization) flags
DEBUG.c= $(DEBUG.c-$(TARCH))
   DEBUG.c-$(TARCH)=       -g -O0
ifdef REMOTE
   DEBUG.c-IRIX32-IP27=    -g -O0
   DEBUG.c-IRIX32-IP27-n32=-g -O0
   DEBUG.c-IRIX64-IP27=    -g -O0
endif

DEBUG.f= $(DEBUG.f-$(TARCH))
   DEBUG.f-$(TARCH)=       -g -O0
ifdef REMOTE
   DEBUG.f-IRIX32-IP27=    -g -O0
   DEBUG.f-IRIX32-IP27-n32=-g -O0
   DEBUG.f-IRIX64-IP27=    -g -O0
endif

DEBUG.F= $(DEBUG.f)

### Loader link flags for static/dynamic linkage.
### Used to force static library linkage.  Example:
###    $(LINK.c) $(CPPFLAGS) $(CFLAGS) -o abc abc.o $(LINKMODE) -lxxx
LINKMODE= $(LINKMODE-$(TARCH))
   LINKMODE-$(TARCH)=      $(CompCLF)
ifdef REMOTE
   LINKMODE-sun4u5_8-SC6=  -Bstatic
   LINKMODE-IRIX32-IP27=
   LINKMODE-IRIX32-IP27-n32=
   LINKMODE-LX26i686-10=   -static-intel -DLINUX -DINTEL -DCompLevel10
   LINKMODE-LX26i686-11=   -static-intel -DLINUX -DINTEL -DCompLevel11
   LINKMODE-LX26i686-11_1MPI3_2_1_009= -static-intel -DLINUX -DINTEL -DCompLevel11
   LINKMODE-LX26i686-11_1MPI4_0_0_028MKL10_2_5_035= -static-intel -DLINUX -DINTEL -DCompLevel11
   LINKMODE-LX26x86_64-10= -static-intel -DLINUX -DINTEL -DCompLevel10
   LINKMODE-LX26x86_64-11= -static-intel -DLINUX -DINTEL -DCompLevel11
   LINKMODE-LX26x86_64-11_1MPI3_2_1_009= -static-intel -DLINUX -DINTEL -DCompLevel11
   LINKMODE-LX26x86_64-11_1MPI4_0_0_028MKL10_2_5_035= -static-intel -DLINUX -DINTEL -DCompLevel11
   LINKMODE-LX26x86_64-4_1_2= -DLinux -Dx86_64 -DGNU -DX86_64 -D__x86_64__
   LINKMODE-LX26x86_64-4_3_2= -DLinux -Dx86_64 -DGNU -DX86_64 -D__x86_64__
   LINKMODE-LX26sgiia64-10=-static-intel -DLINUX -DINTEL -DCompLevel10
#  LINKMODE-LX26sgiia64-11=-static-intel -DLINUX -DINTEL -DCompLevel11
endif

### Load libraries at runtime
LDLIB= $(LDLIB-$(TARCH))
ifdef REMOTE
   LDLIB-LX24i686-6=    setenv LD_LIBRARY_PATH "/opt/pgi/linux86/6.2/lib"
   LDLIB-LX24i686-9=    setenv LD_LIBRARY_PATH "/opt/intel/compiler91/i686/lib"
   LDLIB-LX26sgiia64-9= setenv LD_LIBRARY_PATH "/hpc/intel/compiler91/ia64/lib"
endif

### system load libraries
SYSLIBS.c= $(SYSLIBS.c-$(TARCH))
   SYSLIBS.c-$(TARCH) = $(CompCLB)
ifdef REMOTE
   SYSLIBS.c-LX26i686-10= 
   SYSLIBS.c-LX26i686-11= 
endif

SYSLIBS.f= $(SYSLIBS.f-$(TARCH))
   SYSLIBS.f-$(TARCH) = $(CompFLB)
ifdef REMOTE
   SYSLIBS.f-sun4u5_8-SC6=   -lM77 -lF77 -lsunmath
   SYSLIBS.f-IRIX32-IP27=    -lftn
   SYSLIBS.f-IRIX32-IP27-n32=-lftn
   SYSLIBS.f-IRIX64-IP27=    -lftn
   SYSLIBS.f-LX26i686-10= 
   SYSLIBS.f-LX26i686-11= 
endif

SYSLIBS.F= $(SYSLIBS.f)

### SYSLIBS should always appear last in a LINK command.
SYSLIBS= $(SYSLIBS-$(TARCH))
ifdef REMOTE
   SYSLIBS-sun4u5_8-SC6=  -Bdynamic -ldl -lc $(LINKMODE)
endif

### Command (or nop) for library table of contents.
RANLIB= $(RANLIB-$(HARCH))
   RANLIB-$(HARCH)=   ranlib
ifdef REMOTE
   RANLIB-sun4u5_8=   : skip ranlib
   RANLIB-IRIX32=     : skip ranlib
   RANLIB-IRIX64=     : skip ranlib
endif

### Command to save old, older, oldest versions, when installing the new.
SAVE_ALL= \
   if [ -f $@.oldest ]; then chmod +w $@.oldest; $(RM-f) $@.oldest; fi; \
   if [ -f $@.older ];  then $(MV) $@.older $@.oldest; fi; \
   if [ -f $@.old ];    then $(MV) $@.old   $@.older; fi; \
   if [ -f $@ ];        then $(MV) $@       $@.old; fi

### Command to save old version, when installing the new.
SAVE_AT= \
   if [ -f $@.old ]; then chmod +w $@.old; $(RM-f) $@.old; fi; \
   if [ -f $@ ];     then $(MV) $@ $@.old; fi

### Command to remove old version, after installing the new.
KILL_OLD= \
   if [ -f $@.old ]; then if [ -f $@ ]; then $(RM-f) $@.old; \
   else $(MV) $@.old $@; fi; fi

### Default API development directories.
API_ETC=   $(DDSROOT)/etc
API_BIN=   $(DDSROOT)/bin
API_INC=   $(DDSROOT)/include
API_BIN.a= $(DDSROOT)/bin/$(ArchBin)
API_INC.a= $(DDSROOT)/include/$(UARCH)
API_LIB.a= $(DDSROOT)/lib/$(UARCH)

### Default list of output directories for source install.
INSTALL2_SRC_DIR= $(API_ETC)  $(API_BIN) $(API_INC)

### Default list of output directories for arch install.
INSTALL2_ARCH_DIR= $(API_BIN.a) $(API_INC.a) $(API_LIB.a)

### Collections of deliverables (installed).
INSTALL2_SRC_ETC=     $(patsubst %, $(API_ETC)/%, $(INSTALL_SRC_ETC))
INSTALL2_SRC_BIN=     $(patsubst %, $(API_BIN)/%, $(INSTALL_SRC_BIN))
INSTALL2_SRC_INC.h=   $(patsubst %, $(API_INC)/%, $(INSTALL_SRC_INC.h))

INSTALL2_ARCH_BIN=    $(patsubst %, $(API_BIN.a)/%, $(INSTALL_ARCH_BIN))
INSTALL2_ARCH_INC.h=  $(patsubst %, $(API_INC.a)/%, $(INSTALL_ARCH_INC.h))
INSTALL2_ARCH_LIB.a=  $(patsubst %, $(API_LIB.a)/%, $(INSTALL_ARCH_LIB.a))

### Convenience macros for library "xxx" references.
### Portable rules can be created for generic libraries,
### where actual libraries may correspond to one or more
### real libraries (host and site dependent variants).
### Example: "$(xxx.a)" library reference for dependency line
### Example: "$(I.xxx)" include file search path
### Example: "$(L.xxx)" library search path
### Example: "$(l.xxx)" library reference
### Example: "$(.xxx)"  combination "$(L.xxx) $(l.xxx)"
###    where "xxx" is dds, chost, fhost, gio, etc.

DDS_LIB= dds_r3
HOST_LIB_C= chost
HOST_LIB_F= fhost
DDS_LIB_GIO= $(l.gio)

dds.a=   $(DDSROOT)/lib/$(UARCH)/lib$(DDS_LIB).a
I.dds=   -I$(DDSROOT)/include  -I$(DDSROOT)/include/$(UARCH)
L.dds=   -L$(DDSROOT)/lib/$(UARCH) 
l.dds=   -l$(DDS_LIB) $(DDS_LIB_GIO) 
.dds=    $(L.dds) $(l.dds)

ddsg.a= $(DDSROOT)/lib/$(UARCH)/lib$(DDS_LIB)g.a
I.ddsg= $(I.dds)
L.ddsg= $(L.dds)
l.ddsg= -l$(DDS_LIB)g $(DDS_LIB_GIO)
.ddsg=  $(L.ddsg) $(l.ddsg)

gio.a=   $(DDSROOT)/lib/$(UARCH)/libgio.a
I.gio=   -I$(DDSROOT)/include 
L.gio=   -L$(DDSROOT)/lib/$(UARCH)
l.gio=   -lgio
.gio=    $(L.gio) $(l.gio)

chost.a= $(DDSROOT)/lib/$(UARCH)/lib$(HOST_LIB_C).a
I.chost= -I$(DDSROOT)/include -I$(DDSROOT)/include/$(UARCH)
L.chost= -L$(DDSROOT)/lib/$(UARCH)
l.chost= -l$(HOST_LIB_C)
.chost=  $(L.chost) $(l.chost)

fhost.a= $(DDSROOT)/lib/$(UARCH)/lib$(HOST_LIB_F).a
I.fhost= -I$(DDSROOT)/include
L.fhost= -L$(DDSROOT)/lib/$(UARCH)
l.fhost= -l$(HOST_LIB_F)
.fhost=  $(L.fhost) $(l.fhost)

### Search path for target and dependency files.
VPATH= ..

### Default implicit rules, within default macro section.
### These are NOT grouped with the "normal" rules, because
### they may be overridden for site and host variants.

.SUFFIXES:
.SUFFIXES: .f .c .F .o .a .h

.f.o:
	$(COMPILE.f) $(FFLAGS) -o $@ $<

.c.o:
	$(COMPILE.c) $(CFLAGS) $(CPPFLAGS) -o $@ $<

.c.a:
	$(COMPILE.c) $(CFLAGS) $(CPPFLAGS) -o $% $<
	$(AR) $(ARFLAGS) $@ $%; $(RANLIB) $@

.f.a:
	$(COMPILE.f) $(FFLAGS) -o $(<f:.f=.o) $<
	$(AR) $(ARFLAGS) $@ $%; $(RANLIB) $@
	@ $(RM-f) $(<f:.f=.o)

.o.a:
	$(AR) $(ARFLAGS) $@ $%; $(RANLIB) $@

.c:
	$(LINK.c) $(CFLAGS) $(CPPFLAGS) -o $@ $< $(LIBS) $(SYSLIB.c)

.f:
	$(LINK.f) $(FFLAGS) -o $@ $< $(LIBS)

.o:
	$(LOAD) -o $@ $< $(LIBS)

.F.o:
	$(COMPILE.F) $(FFLAGS) $(CPPFLAGS) -o $@ $<
 
.F.a:
	$(COMPILE.F) $(FFLAGS) $(CPPFLAGS) -o $(<F:.F=.o) $<
	$(AR) $(ARFLAGS) $@ $%; $(RANLIB) $@
	@ $(RM-f) $(<F:.F=.o)
 
.F:
	$(COMPILE.F) $(FFLAGS) $(CPPFLAGS) -o $(<F:.F=.o) $<
	$(LINK.F) -o $@ $(<F:.F=.o) $(LIBS)
	@ $(RM-f) $(<F:.F=.o)
