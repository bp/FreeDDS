#######################################################################
#                 copyright 2005, BP America Inc.                     #
#                        All Rights Reserved                          #
#######################################################################

File: $DDSROOT/README.makescheme
 
 RATIONALE:

    This "make" scheme takes a "minimalist" approach to the problem.
    It uses a small sub-set of features found in various makes.
    GNU make is used to provide a consistant implementation of this
    sub-set.  Complex GNU extensions are intentionally avoided:
       1) if-else-endif logic is replaced by "tables" of macros.
       2) "includes" and functions to transform text are minimized.
       3) ":=" macro assignments are almost eliminated, in favor
          of classical "=" recursively expanded macros.
       4) system and application Makefiles are shorter than USP
          equivalents, while retaining (enhancing?) flexibility.
          a) parallel makes for any combination of architectures can
             be launched with one command from any master host.
          b) optimization level can be selected symbolicly.
          c) required subdirectories are automatically created.
          d) compiler versions are independent of "product" history.

 OVERVIEW:
    Make processing can be started in the source directory.
 
       It will directly process a few simple goals, but its primary job
       is to restart make on remote hosts or in the "TARCH" directory.
       The ".DEFAULT" rule provides the special smarts that are needed.
 
          If the current "$@" goal is a ping-able host, then another
          make is started on it.  The parent's "target" and "TARCH" are
          passed on the command line to the remote make, iff non-null.  
          "host=local" is forced on all remote makes, to prevent 
          recursion.

          If the current goal is NOT ping-able, and is NOT "local",
          then the effective target is "$@".  Goal processing continues.

          If "$(host)" is NOT "local", then another make is started in
          the current source directory.  The parent's "target" and "TARCH"
          are passed along to the recursive make, iff non-null.
          "host=local" is forced to prevent further recursion.  The new
          goal is "$(host)".
    
          If the goal is NOT ping-able (or host is "local"), another
          make is started on the current host in the "TARCH" directory.
          This is the catch-all for source level make processing.
          $(VARCH) macro provides a default for "TARCH".
          The "Makefile" in "TARCH" is created before starting make.

       Host names may have an explicit "TARCH" suffix (gsul16.sun4u-SC3).
       If specified, remote makes are forced to use it for the "TARCH".
       Targets may be prefixed by "serial." to inhibit parallelization.
       For example, "serial.install_src" prevents multiple architectures
       from trying to install shared source files concurrently.
 
    Make processing can be started in the "TARCH" directory.
 
       This is where the compile and link rules are processed.
       The "Makefile" in the "TARCH" directory is created by source
       level processing, prior to launching a make in "TARCH".
       TARCH/Makefile can be editted and used for temporary tests.
       Permanent changes must be made to source level files.
 
 SOURCE LEVEL DUMMY TARGETS(these are not uptodate):
    yelp           Simple test, via yelp_src and yelp_arch.
    yelp_src       Test source level target.
    NCSI.COPY      Update remote source.
    machine.COPY   Update remote source.
    all            All hosts defined by $(world)
    sun4           Nominal sun4 arch (SC3)
    sun4-SC3       via $(SERVER-sun4)
    sun4-SC4       via $(SERVER-sun4)
    sun4cg92       Nominal sun4cg92 arch (SC3 and SC4)
    sun4cg92-SC3   via $(SERVER-sun4cg92)
    sun4cg92-SC4   via $(SERVER-sun4cg92)
    sun4u          Nominal sun4u arch (SC3 and SC4)
    sun4u-SC3      via $(SERVER-sun4u)
    sun4u-SC4      via $(SERVER-sun4u)
    sun4fs64       Nominal sun4fs64 arch (SC4)
    sun4fs64-SC3   via $(SERVER-sun4fs64)
    sun4fs64-SC4   via $(SERVER-sun4fs64)
    sun4ufs64-SC4  via $(SERVER-sun4ufs64)
    sun4m5_6-SC4   via $(SERVER-sun4m5_6)
    IRIX           Nominal IRIX arch (IRIX32, IRIX64)
    IRIX32         Nominal IRIX32 arch (IRIX32-IP21, IRIX32-IP25)
    IRIX64         Nominal IRIX64 arch (IRIX64-IP21, IRIX64-IP25)
    IRIX-IP21      Nominal IP21 arch (IRIX32-IP21, IRIX64-IP21)
    IRIX-IP25      Nominal IP25 arch (IRIX32-IP25, IRIX64-IP25)
    IRIX32-IP21    via $(SERVER-IRIX-IP21)
    IRIX64-IP21    via $(SERVER-IRIX-IP21)
    IRIX32-IP25    via $(SERVER-IRIX-IP25)
    IRIX64-IP25    via $(SERVER-IRIX-IP25)
    IRIX64-IP27    via $(SERVER-IRIX-IP27)
    HP-UX          via $(SERVER-HP-UX)
    cray2          via $(SERVER-cray2)
    crayc90        via $(SERVER-crayc90)
    man            print man pages
    man1           print section 1 man pages
    man3           print section 3 man pages
    man3f          print section 3f man pages
    install        install development files
    installed      long list of installed files
    clean          clean via clean_src and clean_arch
    NUKE_SRC       Are you sure ???
 
 
 ARCH LEVEL DUMMY TARGETS:
    yelp_arch      Test arch level target.
    clean          via clean.o
    clean.o        rm -f *.o and via clean.a
    clean.a        rm -f lib*.a
    clean.so       rm -f lib*.so*
    clean_all      rm -f *
    install        via install_arch
 
 CONTROL MACROS
    target         Goal for make processing
    host           Host name (local, world, sun4u, gssgi2, etc.)
    TARCH          Target architecture (default provided by VARCH)

 SELECTION MACROS cross reference table
    Note: macro values must NOT contain "." because its used as a
    delimiter between host and architecture in makefile scripts.
    Note: DARCH macros values must be valid names for cpp #define,
    i.e. they must not contain "-" (or "." for that matter).

    TARCH           HARCH      DARCH     UARCH                Rev2 DDS
    sun4-SC3        sun4       sun4      sun4-SC3             sun4-SC3
                                         SunOS/4/$(PACKAGE)/prod/sun4m
    sun4-SC4        sun4       sun4      sun4-SC4             -
                                         SunOS/4/$(PACKAGE)/prod/sun4m
 x  sun4cg92-SC3    sun4cg92   sun4cg92  sun4cg92             sun4cg92-SC3
 x                                       SunOS/5/$(PACKAGE)/prod/sun4d
 x  sun4cg92-SC4    sun4cg92   sun4cg92  sun4cg92-SC4         sun4cg92-SC4
 x                                       ?
    sun4u-SC3       sun4u      sun4u     sun4u-SC3            sun4u-SC3
                                         SunOS/5/$(PACKAGE)/prod/sun4u
    sun4u-SC4       sun4u      sun4u     sun4u-SC4            sun4u-SC4
                                         ?
 X  sun4fs64-SC3    sun4fs64   sun4fs64  ?                    -
 X                                       ?
 X  sun4fs64-SC4    sun4fs64   sun4fs64  SunOS/5.6/sun4d/SC4  sun4cg92-SC4-64fs
 X                                       SunOS/5.6/$(PACKAGE)/prod/sun4d
    sun4ufs64-SC4   sun4ufs64  sun4fs64  SunOS/5.6/sun4u/SC4  -
    sun4m5_6-SC4    sun4m5_6   sun4m5_6  SunOS/5.6/sun4m/SC4  -
                                         SunOS/5.6/$(PACKAGE)/prod/sun4u
    IRIX32-IP21     IRIX64     IRIX32    IRIX                 IRIX32-IP21
                                         IRIX/6.5/$(PACKAGE)/prod/IP21
    IRIX32-IP25     IRIX64     IRIX32    IRIX32               IRIX32
                                         IRIX/6.5/$(PACKAGE)/prod/IP25
    IRIX64-IP21     IRIX64     IRIX64    IRIX64-IP21          IRIX64-IP21
                                         IRIX64/6.5/$(PACKAGE)/prod/IP21
    IRIX64-IP25     IRIX64     IRIX64    IRIX64               IRIX64
                                         IRIX64/6.5/$(PACKAGE)/prod/IP25
    IRIX64-IP27     IRIX64     IRIX64    IRIX64/6/IP27        -
                                         IRIX64/6.5/$(PACKAGE)/prod/IP27
    HP-UX           HP-UX      HP_UX     HP-UX                HP-UX
                                         HP-UX/9/$(PACKAGE)/prod/9000-735
    cray2           cray2      cray2     cray2                cray2
                                         Cray/8/$(PACKAGE)/prod/$(TARCH)
    crayc90         crayc90    crayc90   crayc90              crayc90
                                         Cray/8/$(PACKAGE)/prod/$(TARCH)
    LX2i686         LX2i686    LX2i686   Linux/2.4.0/$(PACKAGE)/prod/i686
                                         Linux/2.4.0/i686

       TARCH => Target Architecture
       HARCH => Host Architecture (reported by HostArch)
       DARCH => cpp #define
       UARCH => USP equivalent to TARCH

    OS evolution and terminology 
       cira   Solaris    SunOS
       ???    ---        4.1     Berkley based
       95?    2.5        5.5     System V (not Berkley)
       97?    2.6        5.6     + big file support
       98Q3   2.7        5.7     + 64 bit support (fall '98)

 COMPILER FLAGS AND OPTIONS
    CFLAGS,  FFLAGS     Compile flags, i.e. "CFLAGS=$(OPTIMIZE.c)"
    CPPFLAGS            Preprocessor flags, i.e. "CPPFLAGS=$(I.dds)"
    LIBS                Load libraries, i.e. "LIBS= $(.dds) $(.chost)"

 DISTRIBUTED AND INSTALLED DELIVERABLES
    INSTALL_SRC_CMD         shell scripts
    INSTALL_SRC_MAN.1       command documentation
    INSTALL_SRC_ETC         auxiliary files
    INSTALL_ARCH_BIN        binary executeables

 INSTALLED DELIVERABLES FOR DEVELOPMENT
    INSTALL_SRC_INC.h       include files
    INSTALL_SRC_MAN.3       function documentation
    INSTALL_SRC_MAN.3f      fortran documentation
    INSTALL_ARCH_LIB.a      object libraries
    INSTALL_ARCH_LIB.so     shared libraries
    INSTALL_ARCH_INC.h      include files (architecture dependent)
    
 MISCELLANEOUS MACROS
    LIMIT_SEC        cpu time limit for make processing.
    DIST_WHERE       where to distribute deliverables
    DIST_WHY         reason for distribution

 BUGS
    GNU Make version 3.72.1    is buggy
    GNU Make version 3.74      is OK
    GNU Fortran version 4.1.1  is OK
    do NOT put comments after macro defintions (i.e. X= abc # pain !)

